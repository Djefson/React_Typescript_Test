'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectEach = require('fast-loops/lib/objectEach');

var _objectEach2 = _interopRequireDefault(_objectEach);

var _arrayEach = require('fast-loops/lib/arrayEach');

var _arrayEach2 = _interopRequireDefault(_arrayEach);

var _assignStyle = require('css-in-js-utils/lib/assignStyle');

var _assignStyle2 = _interopRequireDefault(_assignStyle);

var _isobject = require('isobject');

var _isobject2 = _interopRequireDefault(_isobject);

var _felaUtils = require('fela-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function removeUndefined(style) {
  (0, _objectEach2.default)(style, function (value, property) {
    if ((0, _isobject2.default)(value)) {
      style[property] = removeUndefined(value);
    } else if (Array.isArray(value)) {
      style[property] = value.filter(function (val) {
        return !(0, _felaUtils.isUndefinedValue)(val);
      });
    } else if ((0, _felaUtils.isUndefinedValue)(value)) {
      delete style[property];
    }
  });

  return style;
}


function extendStyle(style, extension) {
  // extend conditional style objects
  if (extension && Object.prototype.hasOwnProperty.call(extension, 'condition')) {
    if (extension.condition) {
      // eslint-disable-next-line no-use-before-define
      (0, _assignStyle2.default)(style, extend(extension.style));
    }
  } else {
    // extend basic style objects
    (0, _assignStyle2.default)(style, removeUndefined(extend(extension)));
  }
}

function extend(style) {
  (0, _objectEach2.default)(style, function (value, property) {
    if (property === 'extend') {
      var extensions = [].concat(value);

      (0, _arrayEach2.default)(extensions, function (extension) {
        return extendStyle(style, extension);
      });
      delete style[property];
    } else if ((0, _isobject2.default)(value)) {
      // support nested extend as well
      style[property] = extend(value);
    }
  });

  return style;
}

exports.default = function () {
  return extend;
};
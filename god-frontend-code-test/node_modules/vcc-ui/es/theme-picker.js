import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import { ThemeContext, ThemeProvider as FelaThemeProvider } from 'react-fela';
import { getTheme } from './themes/get-theme';
export function ThemePicker(_ref) {
  var direction = _ref.direction,
      variant = _ref.variant,
      children = _ref.children;
  var currentTheme = useContext(ThemeContext) || getTheme(variant || 'light');

  var theme = _objectSpread(_objectSpread({}, variant ? getTheme(variant) : currentTheme), {}, {
    direction: direction || currentTheme.direction
  });

  return /*#__PURE__*/React.createElement(FelaThemeProvider, {
    theme: theme,
    overwrite: false
  }, children);
}
ThemePicker.propTypes = {
  direction: PropTypes.oneOf(['ltr', 'rtl']),
  variant: PropTypes.oneOf(['light', 'dark']),
  children: PropTypes.node.isRequired
};
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { sizeToRem } from '../size-to-rem';
import { lineHeightToNumber } from '../line-height-to-number';
import { buildTypeScale } from '../build-type-scale';
import designTokens from '@volvo-cars/ui-design-tokens/build/web/volvo/tokens.json';
import { legacyColors } from './legacy-colors';
import { fonts } from './fonts';
var color = designTokens.color;
var colors = legacyColors;
var tokens = {
  buttonPaddingVertical: 12,
  buttonPaddingHorizontal: 24,
  buttonPrimaryColor: color.primitive.blue,
  buttonPrimaryOutlineColor: color.primitive.accentBlue,
  buttonPrimaryForeground: color.foreground.inverted,
  buttonPrimaryHoverBackground: color.primitive.black,
  buttonSecondaryColor: color.primitive.black,
  buttonSecondaryForeground: color.foreground.inverted,
  buttonSecondaryHoverBackground: color.primitive.blue,
  buttonDestructiveColor: color.foreground.alert,
  buttonDestructiveForeground: color.foreground.inverted,
  buttonDestructiveHoverBackground: color.primitive.black,
  linkForeground: color.foreground.action,
  linkHoverForeground: color.foreground.primary,
  inputPaddingVertical: 12,
  inputPaddingHorizontal: 16,
  inputForeground: color.foreground.primary,
  inputDisabledForeground: color.primitive.grey300,
  // unused
  inputDisabledControl: color.primitive.grey200,
  // should be decision?
  inputDisabledBorder: color.primitive.grey300,
  inputDisabledBackground: color.primitive.grey500,
  inputBackground: color.background.primary,
  inputBorder: color.ornament.border,
  inputBorderFocus: color.primitive.accentBlue,
  inputPlaceholder: color.foreground.secondary,
  inputControl: color.primitive.accentBlue,
  inputControlBackground: color.primitive.accentBlue,
  inputControlForeground: color.primitive.white,
  inputControlBorder: color.primitive.grey200,
  card: {
    background: color.background.primary,
    shadow: 'rgba(0, 0, 0, 0.2) 0px 4px 12px'
  }
};
var breakpointSizes = {
  m: 480,
  l: 1024,
  xl: 1600
}; // there is no fromS as that'd be the default styles and we do not want
// those to be part of a min-width: 0px media queries due to CSS performance

var breakpoints = {
  // duplicate of untilM
  // > 0 && < 480
  get onlyS() {
    return this.untilM;
  },

  // < 480
  untilM: '@media (max-width: ' + (breakpointSizes.m - 1) + 'px)',
  // >= 480
  fromM: '@media (min-width: ' + breakpointSizes.m + 'px)',

  // >= 480 && < 1024
  get onlyM() {
    return this.fromM + ' and ' + this.untilL.substring(7);
  },

  // < 1024
  untilL: '@media (max-width: ' + (breakpointSizes.l - 1) + 'px)',
  // >= 1024
  fromL: '@media (min-width: ' + breakpointSizes.l + 'px)',

  // >= 1024 && < 1600
  get onlyL() {
    return this.fromL + ' and ' + this.untilXL.substring(7);
  },

  // < 1600
  untilXL: '@media (max-width: ' + (breakpointSizes.xl - 1) + 'px)',
  // >= 1600
  fromXL: '@media (min-width: ' + breakpointSizes.xl + 'px)',

  // duplicate of fromXL
  // >= 1600
  get onlyXL() {
    return this.fromXL;
  }

};
var icons = ['account', 'email', 'search', 'globe', 'facebook', 'twitter', 'youtube', 'linkedin', 'instagram', 'pinterest', 'youku', 'vkontakte', 'wechat', 'weibo'];
export var FONT_WEIGHTS = {
  semiLight: 300,
  regular: 400,
  medium: 500,
  bold: 700
};
var fontTypes = {
  BROAD: 'Volvo Broad, Arial Black, sans-serif',
  NOVUM: 'Volvo Novum, Arial, sans-serif',
  SERIF: 'Volvo Serif, serif'
};
var logoImages = {
  square: 'volvo-logo.png',
  square2x: 'volvo-logo-2x.png',
  spreadmark: 'volvo-wordmark-black.svg'
}; // it automatically picks up 2x pictures if found as a prefix to the actual names

var logoTypes = {
  SQUARE: 'square',
  SPREADMARK: 'spreadmark'
};
var typeScale = {
  /**
    Headings
  */
  peary: {
    standard: {
      element: 'h1',
      styles: {
        fontFamily: fontTypes.NOVUM,
        fontSize: sizeToRem(6),
        fontWeight: FONT_WEIGHTS.medium,
        lineHeight: lineHeightToNumber(52, 6),
        fromM: {
          fontSize: sizeToRem(6.5),
          lineHeight: lineHeightToNumber(56, 6.5)
        },
        fromL: {
          fontSize: sizeToRem(7),
          lineHeight: lineHeightToNumber(60, 7)
        }
      }
    }
  },
  cook: {
    standard: {
      element: 'h2',
      styles: {
        fontFamily: fontTypes.NOVUM,
        fontSize: sizeToRem(4),
        fontWeight: FONT_WEIGHTS.medium,
        lineHeight: lineHeightToNumber(36, 4),
        fromM: {
          fontSize: sizeToRem(4.5),
          lineHeight: lineHeightToNumber(40, 4.5)
        },
        fromL: {
          fontSize: sizeToRem(5),
          lineHeight: lineHeightToNumber(44, 5)
        }
      }
    }
  },
  ootah: {
    standard: {
      element: 'h3',
      styles: {
        fontFamily: fontTypes.NOVUM,
        fontSize: sizeToRem(3),
        fontWeight: FONT_WEIGHTS.semiLight,
        lineHeight: lineHeightToNumber(28, 3),
        fromM: {
          fontSize: sizeToRem(3.5),
          lineHeight: lineHeightToNumber(32, 3.5)
        },
        fromL: {
          fontSize: sizeToRem(4),
          lineHeight: lineHeightToNumber(36, 4)
        }
      }
    },
    emphasis: {
      styles: {
        fontStyle: 'normal',
        fontWeight: FONT_WEIGHTS.medium
      }
    }
  },

  /**
    Sub-Headings
  */
  hillary: {
    standard: {
      element: 'p',
      styles: {
        fontFamily: fontTypes.NOVUM,
        fontSize: sizeToRem(2.5),
        fontWeight: FONT_WEIGHTS.semiLight,
        lineHeight: lineHeightToNumber(28, 2.5)
      }
    },
    'inline-link': {
      element: 'a',
      styles: {
        color: color.foreground.secondary,
        '&:hover': {
          color: color.foreground.primary,
          textDecoration: 'none'
        }
      }
    },
    emphasis: {
      element: 'em',
      styles: {
        fontStyle: 'normal',
        fontWeight: FONT_WEIGHTS.medium
      }
    }
  },

  /**
    Body
  */
  columbus: {
    standard: {
      element: 'p',
      styles: {
        fontFamily: fontTypes.NOVUM,
        fontSize: sizeToRem(2),
        lineHeight: lineHeightToNumber(24, 2),
        fontWeight: FONT_WEIGHTS.semiLight
      }
    },
    'inline-link': {
      element: 'a',
      styles: {
        color: color.foreground.secondary,
        '&:hover': {
          color: color.foreground.primary,
          textDecoration: 'none'
        }
      }
    },
    emphasis: {
      element: 'em',
      styles: {
        fontStyle: 'normal',
        fontWeight: FONT_WEIGHTS.medium
      }
    }
  },

  /**
    Micro
  */
  bates: {
    standard: {
      element: 'small',
      styles: {
        fontFamily: fontTypes.NOVUM,
        fontSize: sizeToRem(1.5),
        lineHeight: lineHeightToNumber(20, 1.5),
        letterSpacing: '0.02em',
        fontWeight: FONT_WEIGHTS.semiLight
      }
    },
    'inline-link': {
      element: 'a',
      styles: {
        color: color.foreground.primary,
        '&:hover': {
          color: color.foreground.secondary,
          textDecoration: 'none'
        }
      }
    },
    emphasis: {
      element: 'em',
      styles: {
        fontStyle: 'normal',
        fontWeight: FONT_WEIGHTS.medium
      }
    }
  },

  /**
    ActionText
  */
  amundsen: {
    standard: {
      element: 'span',
      styles: {
        fontFamily: fontTypes.NOVUM,
        fontSize: sizeToRem(2),
        lineHeight: lineHeightToNumber(24, 2),
        letterSpacing: '0.04em',
        fontWeight: FONT_WEIGHTS.medium
      }
    }
  },

  /**
    Outliers
  */
  yang: {
    standard: {
      element: 'p',
      styles: {
        fontWeight: FONT_WEIGHTS.regular,
        fontFamily: fontTypes.BROAD,
        fontSize: sizeToRem(5),
        lineHeight: lineHeightToNumber(40, 5),
        letterSpacing: '0.02em',
        fromM: {
          fontSize: sizeToRem(9),
          lineHeight: lineHeightToNumber(72, 9)
        }
      }
    }
  },
  kelly: {
    standard: {
      element: 'p',
      styles: {
        fontFamily: fontTypes.NOVUM,
        fontWeight: FONT_WEIGHTS.semiLight,
        fontSize: sizeToRem(1.75),
        lineHeight: lineHeightToNumber(22, 1.75)
      }
    },
    emphasis: {
      element: 'em',
      styles: {
        fontStyle: 'normal',
        fontWeight: FONT_WEIGHTS.medium
      }
    },
    'inline-link': {
      element: 'a',
      styles: {
        color: color.foreground.secondary,
        '&:hover': {
          color: color.foreground.primary,
          textDecoration: 'none'
        }
      }
    }
  },
  meir: {
    standard: {
      element: 'p',
      styles: {
        fontFamily: fontTypes.NOVUM,
        fontWeight: FONT_WEIGHTS.semiLight,
        fontSize: sizeToRem(1),
        lineHeight: lineHeightToNumber(16, 1)
      }
    }
  }
};
export default _objectSpread({
  name: 'volvo',
  // this is the default text direction
  // rtl needs to be set via ThemeProvider explicitly
  direction: 'ltr',
  baselineGrid: 8,
  baselineSubGrid: 4,
  breakpoints: breakpoints,
  colors: colors,
  tokens: tokens,
  icons: icons,
  fonts: fonts,
  fontsPath: 'https://www.volvocars.com/static/shared/fonts/',
  fontTypes: fontTypes,
  logoImages: logoImages,
  logoImagesPath: 'https://www.volvocars.com/static/shared/images/',
  logoTypes: logoTypes,
  typeScale: buildTypeScale(typeScale)
}, designTokens);
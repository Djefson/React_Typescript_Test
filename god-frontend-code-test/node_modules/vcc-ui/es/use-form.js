import { arrayReduce } from 'fast-loops';
export function useForm() {
  for (var _len = arguments.length, fields = new Array(_len), _key = 0; _key < _len; _key++) {
    fields[_key] = arguments[_key];
  }

  function touchFields() {
    fields.forEach(function (field) {
      return field.touch();
    });
  }

  function reset() {
    fields.forEach(function (field) {
      return field.update(field.initial);
    });
  }

  function submit(onSubmit) {
    var isValid = arrayReduce(fields, function (isValid, field) {
      return isValid && field.isValid;
    }, true);
    var data = arrayReduce(fields, function (data, _ref) {
      var value = _ref.value,
          name = _ref.name;
      data[name] = value;
      return data;
    }, {}); // if the form is invalid, we touch all fields to reveal the error messages

    if (!isValid) {
      touchFields();
    }

    onSubmit(isValid, data);
  }

  return {
    touchFields: touchFields,
    submit: submit,
    reset: reset
  };
} // TODO: make this only available in development
// for now we're fine due to code splitting though

export function useFormDebugger() {
  for (var _len2 = arguments.length, fields = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    fields[_key2] = arguments[_key2];
  }

  var isValid = arrayReduce(fields, function (isValid, field) {
    return isValid && field.isValid;
  }, true);
  var data = arrayReduce(fields, function (data, _ref2) {
    var name = _ref2.name,
        value = _ref2.value;
    data[name] = value;
    return data;
  }, {});
  var fieldData = arrayReduce(fields, function (data, _ref3) {
    var name = _ref3.name,
        value = _ref3.value,
        isValid = _ref3.isValid,
        isTouched = _ref3.isTouched,
        isDisabled = _ref3.isDisabled,
        isLoading = _ref3.isLoading,
        errorMessage = _ref3.errorMessage;
    data[name] = {
      value: value,
      isTouched: isTouched,
      isValid: isValid,
      isDisabled: isDisabled,
      isLoading: isLoading,
      errorMessage: errorMessage
    };
    return data;
  }, {});
  return {
    data: data,
    fields: fieldData,
    isValid: isValid
  };
}
import React, { createContext } from 'react';
import { useFela } from 'react-fela';
import { string, bool, func, node } from 'prop-types';
import { View } from '../view';
import { Block } from '../block';
import { Message } from '../message';

var labelStyle = function labelStyle(_ref) {
  var isValid = _ref.isValid,
      theme = _ref.theme;
  return {
    color: isValid ? theme.color.foreground.secondary : theme.color.foreground.alert,
    fontSize: 16,
    letterSpacing: '0.02em',
    fontFamily: theme.fontTypes.NOVUM,
    fontWeight: 300
  };
};

export var RadioContext = /*#__PURE__*/createContext({});
export function RadioGroup(_ref2) {
  var legend = _ref2.legend,
      name = _ref2.name,
      _ref2$isValid = _ref2.isValid,
      isValid = _ref2$isValid === void 0 ? true : _ref2$isValid,
      value = _ref2.value,
      onChange = _ref2.onChange,
      errorMessage = _ref2.errorMessage,
      description = _ref2.description,
      children = _ref2.children;

  var _useFela = useFela(),
      theme = _useFela.theme;

  var styleProps = {
    isValid: isValid,
    theme: theme
  };
  var context = {
    name: name,
    isValid: isValid,
    value: value,
    onChange: onChange
  };
  var messages = /*#__PURE__*/React.createElement(React.Fragment, null, !errorMessage ? null : /*#__PURE__*/React.createElement(Message, {
    type: "error"
  }, errorMessage), !description ? null : /*#__PURE__*/React.createElement(Message, null, description));
  return /*#__PURE__*/React.createElement(View, {
    spacing: 0.5
  }, /*#__PURE__*/React.createElement(Block, {
    as: "legend",
    extend: labelStyle(styleProps)
  }, legend), /*#__PURE__*/React.createElement(RadioContext.Provider, {
    value: context
  }, children), messages);
}
RadioGroup.propTypes = {
  name: string,

  /** Renders a legend.  */
  legend: string,

  /** Renders a description text underneath the input.  */
  description: string,

  /** Renders a red error message for validation underneath the input.  */
  errorMessage: string,

  /** onChange handler. Triggers on every keyboard and generally
   * is here where you change the value of the `value` property  */
  onChange: func.isRequired,

  /** Value of the textInput. This should be stored in the
   * state of the parent component  */
  value: string.isRequired,

  /** Renders the input as valid or invalid */
  isValid: bool,

  /** A JSX node */
  children: node
};
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { useFela } from 'react-fela';
import { Click } from '../click';
import { Block } from '../block';
import { Inline } from '../inline';
import { Spinner } from '../spinner';
import { getThemeStyle } from '../../get-theme-style';
import { sizeToRem } from '../../size-to-rem';

var padding = function padding(x, y) {
  return {
    padding: "".concat(x, "px ").concat(y, "px")
  };
};

var getIntentStyleMap = function getIntentStyleMap(_ref) {
  var tokens = _ref.tokens;
  return {
    primary: {
      color: tokens.buttonPrimaryColor,
      defaultForeground: tokens.buttonPrimaryForeground,
      highlight: tokens.buttonPrimaryHoverBackground,
      activeBackground: tokens.buttonPrimaryActiveBackground,
      outlineColor: tokens.buttonPrimaryOutlineColor
    },
    secondary: {
      color: tokens.buttonSecondaryColor,
      defaultForeground: tokens.buttonSecondaryForeground,
      highlight: tokens.buttonSecondaryHoverBackground,
      activeBackground: tokens.buttonSecondaryActiveBackground
    },
    destructive: {
      color: tokens.buttonDestructiveColor,
      defaultForeground: tokens.buttonDestructiveForeground,
      highlight: tokens.buttonDestructiveHoverBackground,
      activeBackground: tokens.buttonDestructiveActiveBackground
    }
  };
};

var button = function button(_ref2) {
  var disabled = _ref2.disabled,
      intent = _ref2.intent,
      variant = _ref2.variant,
      size = _ref2.size,
      loading = _ref2.loading,
      theme = _ref2.theme;
  var intentStyleMap = getIntentStyleMap(theme);

  var _ref3 = intentStyleMap[intent] || intentStyleMap.primary,
      color = _ref3.color,
      outlineColor = _ref3.outlineColor,
      defaultForeground = _ref3.defaultForeground,
      activeBackground = _ref3.activeBackground,
      highlight = _ref3.highlight;

  return _objectSpread(_objectSpread({
    display: 'inline-flex',
    minWidth: 96,
    width: '100%',
    outline: 0,
    whiteSpace: 'nowrap',
    justifyContent: 'center',
    userSelect: 'none',
    WebkitTouchCallout: 'none',
    alignItems: 'baseline'
  }, padding(theme.tokens.buttonPaddingVertical, theme.tokens.buttonPaddingHorizontal)), {}, {
    fontFamily: theme.fontTypes.NOVUM,
    textAlign: 'center',
    fontSize: sizeToRem(1.75),
    textTransform: 'uppercase',
    lineHeight: '22px',
    transitionDuration: disabled ? 0 : '100ms, 300ms',
    transitionTimingFunction: 'ease-out',
    transitionProperty: 'transform, background, fill, stroke, color, border-color',
    borderColor: 'transparent',
    borderStyle: 'solid',
    borderWidth: 1,
    borderRadius: 4,
    fontWeight: 500,
    letterSpacing: '0.02em',
    ':focus': {
      boxShadow: "0 0 0 2px ".concat(highlight, "33"),
      ':active': {
        background: activeBackground
      }
    },
    ':focus:not(:focus-visible)': {
      boxShadow: 'none'
    },
    extend: [{
      condition: size === 'small',
      style: _objectSpread(_objectSpread({
        fontSize: sizeToRem(1.5),
        lineHeight: '20px'
      }, padding(theme.tokens.buttonPaddingVertical - theme.baselineGrid / 2 + 1, theme.tokens.buttonPaddingHorizontal - theme.baselineGrid)), {}, {
        '> div svg': {
          height: theme.baselineGrid * 3,
          width: theme.baselineGrid * 3
        }
      })
    }, {
      condition: size === 'large',
      style: _objectSpread(_objectSpread({
        fontSize: sizeToRem(2),
        lineHeight: '24px'
      }, padding(theme.tokens.buttonPaddingVertical * 2 - 1, theme.tokens.buttonPaddingHorizontal + theme.baselineGrid * 2)), {}, {
        '> div svg': {
          height: theme.baselineGrid * 5,
          width: theme.baselineGrid * 5
        }
      })
    }, {
      condition: loading,
      style: {
        justifyContent: 'center',
        alignItems: 'center',
        pointerEvents: 'none'
      }
    }, {
      condition: !disabled,
      style: {
        '@media (hover: hover)': {
          extend: [{
            condition: variant === 'default',
            style: {
              ':hover': {
                borderColor: highlight,
                background: highlight
              }
            }
          }, {
            condition: variant === 'outline',
            style: {
              ':hover': {
                background: color,
                color: defaultForeground,
                borderColor: color,
                fill: defaultForeground,
                stroke: defaultForeground
              }
            }
          }, {
            condition: variant === 'text',
            style: {
              ':hover': {
                color: highlight
              }
            }
          }]
        },
        ':active': {
          extend: [{
            transform: 'scale(0.95, 0.9)'
          }, {
            condition: variant === 'default',
            style: {
              borderColor: highlight,
              background: highlight
            }
          }, {
            condition: variant === 'outline',
            style: {
              background: color,
              color: defaultForeground,
              borderColor: color,
              fill: defaultForeground,
              stroke: defaultForeground
            }
          }, {
            condition: variant === 'text',
            style: {
              color: highlight
            }
          }]
        },
        extend: [{
          condition: variant === 'default',
          style: {
            borderColor: color,
            background: color,
            color: defaultForeground,
            fill: defaultForeground,
            stroke: defaultForeground
          }
        }, {
          condition: variant === 'outline',
          style: {
            borderColor: outlineColor || color,
            color: outlineColor || color,
            fill: outlineColor || color,
            stroke: outlineColor || color
          }
        }, {
          condition: variant === 'text',
          style: {
            borderColor: 'transparent',
            fill: color,
            color: color,
            stroke: color
          }
        }]
      }
    }, {
      condition: disabled,
      style: {
        opacity: 0.3,
        cursor: 'default',
        fill: theme.color.foreground.secondary,
        stroke: theme.color.foreground.secondary,
        ':focus': {
          outline: '0 0 0 2px #CCCCCC33'
        },
        ':focus:not(:focus-visible)': {
          outline: 0
        },
        extend: [{
          condition: variant === 'default',
          style: {
            background: color,
            color: defaultForeground
          }
        }, {
          condition: variant === 'outline',
          style: {
            borderColor: color,
            color: color
          }
        }]
      }
    }]
  });
};

export var Button = /*#__PURE__*/React.forwardRef(function (_ref4, ref) {
  var children = _ref4.children,
      loading = _ref4.loading,
      disabled = _ref4.disabled,
      _ref4$intent = _ref4.intent,
      intent = _ref4$intent === void 0 ? 'primary' : _ref4$intent,
      _ref4$variant = _ref4.variant,
      variant = _ref4$variant === void 0 ? 'default' : _ref4$variant,
      _ref4$size = _ref4.size,
      size = _ref4$size === void 0 ? 'medium' : _ref4$size,
      props = _objectWithoutProperties(_ref4, ["children", "loading", "disabled", "intent", "variant", "size"]);

  var _useFela = useFela(),
      theme = _useFela.theme;

  var styleProps = {
    disabled: disabled,
    intent: intent,
    variant: variant,
    loading: loading,
    size: size,
    theme: theme
  };
  return /*#__PURE__*/React.createElement(Block, {
    extend: {
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(Click, _extends({
    ref: ref
  }, props, {
    onTouchStart: function onTouchStart() {},
    disabled: disabled || loading,
    extend: [button(styleProps), getThemeStyle('button', theme, styleProps)]
  }), loading && /*#__PURE__*/React.createElement(Block, {
    extend: {
      position: 'absolute',
      margin: '0 auto'
    }
  }, /*#__PURE__*/React.createElement(Spinner, {
    color: "inherit",
    size: theme.baselineGrid * 3
  })), loading ? /*#__PURE__*/React.createElement(Inline, {
    extend: {
      visibility: 'hidden'
    }
  }, /*#__PURE__*/React.createElement(InnerButton, null, children)) : /*#__PURE__*/React.createElement(InnerButton, null, children)));
});

var InnerButton = function InnerButton(_ref5) {
  var children = _ref5.children;
  return /*#__PURE__*/React.createElement(React.Fragment, null, children);
};

Button.displayName = 'Button';
Button.propTypes = {
  /** A JSX node */
  children: PropTypes.node,
  intent: PropTypes.oneOf(['primary', 'secondary', 'destructive']),
  variant: PropTypes.oneOf(['default', 'outline', 'text']),
  loading: PropTypes.bool,
  disabled: PropTypes.bool,

  /** Adding href changes the HTML element from `<button>` to `<a>` */
  href: PropTypes.string,
  size: PropTypes.oneOf(['small', 'medium', 'large'])
};
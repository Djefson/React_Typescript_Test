import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import PropTypes from 'prop-types';
import React from 'react';
import { useFela } from 'react-fela';
var style = {
  display: 'block'
};
export var Block = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      _ref$as = _ref.as,
      As = _ref$as === void 0 ? 'div' : _ref$as,
      extend = _ref.extend,
      props = _objectWithoutProperties(_ref, ["children", "className", "as", "extend"]);

  var _useFela = useFela(props),
      css = _useFela.css;

  return /*#__PURE__*/React.createElement(As, _extends({}, props, {
    ref: ref,
    className: css(style, extend) + (className ? ' ' + className : '')
  }), children);
});
Block.displayName = 'Block';
Block.propTypes = {
  /** Any valid React element, function, or a string specifying a name for an HTML element */
  as: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.elementType, PropTypes.func]),

  /** An object containing valid CSS style declarations */
  extend: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.array]),

  /** A JSX node */
  children: PropTypes.node,

  /** Add an additional custom className to element. Warning: make sure it doesn't collide with the classNames being generated for the atomic CSS */
  className: PropTypes.string
};
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useContext } from 'react';
import { useFela } from 'react-fela';
import PropTypes from 'prop-types';
import { normalizeResponsiveValue, mergeStyles, getRenderedElement } from './utils';
import { responsiveStringProp } from '../../prop-types';
export var SUB_STYLES = ['standard', 'inline-link', 'emphasis'];
var TextContext = /*#__PURE__*/React.createContext({
  isRootElement: true
});
var defaultVariant = 'columbus';
var defaultSubStyle = 'standard';
export var Text = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var extend = _ref.extend,
      variant = _ref.variant,
      subStyle = _ref.subStyle,
      fg = _ref.fg,
      _ref$foreground = _ref.foreground,
      foreground = _ref$foreground === void 0 ? fg : _ref$foreground,
      as = _ref.as,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["extend", "variant", "subStyle", "fg", "foreground", "as", "className", "children"]);

  var _useFela = useFela(props),
      css = _useFela.css,
      theme = _useFela.theme;

  var _useContext = useContext(TextContext),
      isRootElement = _useContext.isRootElement,
      parentVariant = _useContext.parentVariant,
      parentSubStyle = _useContext.parentSubStyle;

  var appliedVariant = variant || parentVariant || defaultVariant;
  var appliedSubStyle = subStyle || parentSubStyle || defaultSubStyle;
  var variants = normalizeResponsiveValue(appliedVariant);
  var subStyles = normalizeResponsiveValue(appliedSubStyle);
  var displayModifier = isRootElement ? {
    display: 'block'
  } : {};
  var Element = getRenderedElement(isRootElement, as, appliedVariant, appliedSubStyle, theme);
  return /*#__PURE__*/React.createElement(Element, _extends({
    ref: ref
  }, props, {
    className: css(displayModifier, _objectSpread(_objectSpread({
      color: foreground || theme.color.foreground.primary,
      margin: 0
    }, mergeStyles(theme.typeScale[variants[0]], subStyles[0])), {}, {
      fromM: mergeStyles(theme.typeScale[variants[1]], subStyles[1], 'fromM'),
      fromL: mergeStyles(theme.typeScale[variants[2]], subStyles[2], 'fromL'),
      fromXL: mergeStyles(theme.typeScale[variants[3]], subStyles[3], 'fromXL')
    }), extend) + (className ? ' ' + className : '')
  }), /*#__PURE__*/React.createElement(TextContext.Provider, {
    value: {
      isRootElement: false,
      parentVariant: appliedVariant,
      parentSubStyle: appliedSubStyle
    }
  }, children));
});
Text.displayName = 'Text';
Text.propTypes = {
  /** A JSX node */
  children: PropTypes.node,

  /** A custom font color */
  fg: responsiveStringProp,

  /** A custom font color */
  foreground: responsiveStringProp,

  /** Any valid React element, function, or a string specifying a name for an HTML element */
  as: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.elementType, PropTypes.func]),

  /** One of the available type scale styles */
  variant: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** One of the available sub-styles for a given type scale */
  subStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),

  /** An object containing valid CSS style declarations */
  extend: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.array]),

  /** Add an additional custom className to element. Warning: make sure it doesn't collide with the classNames being generated for the atomic CSS */
  className: PropTypes.string
};
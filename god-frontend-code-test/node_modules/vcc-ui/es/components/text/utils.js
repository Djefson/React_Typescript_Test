import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _typeof from "@babel/runtime/helpers/typeof";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

export function stripFlowElement(el) {
  return /^(p|h[1-6])$/.test(el) ? 'span' : el;
} // TODO: can we refactor this to not look that ugly?

export function arrayifyResponsiveValue(value) {
  if (_typeof(value) === 'object') {
    if (!Array.isArray(value)) {
      var _defaultValue = value.default,
          _fromM = value.fromM,
          _fromL = value.fromL,
          _fromXL = value.fromXL;
      return [_defaultValue, _fromM, _fromL, _fromXL];
    }

    var _value = _slicedToArray(value, 4),
        defaultValue = _value[0],
        fromM = _value[1],
        fromL = _value[2],
        fromXL = _value[3];

    return [defaultValue, fromM, fromL, fromXL];
  }

  return [value, value, value, value];
}
export function populateResponsiveArray(value) {
  return value.reduce(function (filled, item, index) {
    return [].concat(_toConsumableArray(filled), [item || filled[index - 1]]);
  }, []);
}
export function normalizeResponsiveValue(value) {
  return populateResponsiveArray(arrayifyResponsiveValue(value));
}
export function getBaseStyle() {
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  // eslint-disable-next-line
  var fromM = style.fromM,
      fromL = style.fromL,
      fromXL = style.fromXL,
      baseStyle = _objectWithoutProperties(style, ["fromM", "fromL", "fromXL"]);

  return baseStyle;
}
var breakpoints = ['fromM', 'fromL', 'fromXL'];
export function getStylesForEachBreakpoint(styles, breakpoint) {
  var breakpointSpan = breakpoints.indexOf(breakpoint) + 1;
  return breakpoints.slice(0, breakpointSpan).reduce(function (mergedStyles, breakpoint) {
    if (styles[breakpoint]) {
      return _objectSpread(_objectSpread({}, mergedStyles), styles[breakpoint]);
    }

    return mergedStyles;
  }, {});
}
export function mergeStyles(_ref, subStyle, breakpoint) {
  var styles = _ref.standard.styles,
      subStyles = _objectWithoutProperties(_ref, ["standard"]);

  var baseStyle = getBaseStyle(styles);
  var baseSubStyle = getBaseStyle(subStyles[subStyle] ? subStyles[subStyle].styles : {});
  return _objectSpread(_objectSpread(_objectSpread({}, baseStyle), baseSubStyle), getStylesForEachBreakpoint(styles, breakpoint));
}
export function getRenderedElement(isRootElement, as, variant, subStyle, theme) {
  var defaultElement = as || typeof variant === 'string' && typeof subStyle === 'string' && theme.typeScale[variant][subStyle] && theme.typeScale[variant][subStyle].element || 'p';
  return isRootElement ? defaultElement : stripFlowElement(defaultElement);
}
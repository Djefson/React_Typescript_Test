import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState } from 'react';
import { Checkbox } from '.';
import { Flex } from '../flex';
import { Text } from '../text';
import { Spacer } from '../spacer';
import { View } from '../view';
export default {
  title: 'Checkbox'
};

var DisplayWrapper = function DisplayWrapper(_ref) {
  var name = _ref.name,
      children = _ref.children;
  return /*#__PURE__*/React.createElement(Flex, {
    extend: {
      padding: 20,
      paddingRight: 40,
      minWidth: 200
    }
  }, /*#__PURE__*/React.createElement(Text, null, name), /*#__PURE__*/React.createElement(Spacer, {
    size: 0.5
  }), children);
};

export var Default = function Default() {
  function CheckboxWithValue(_ref2) {
    var _ref2$defaultValue = _ref2.defaultValue,
        defaultValue = _ref2$defaultValue === void 0 ? false : _ref2$defaultValue,
        disabled = _ref2.disabled,
        isValid = _ref2.isValid,
        errorMessage = _ref2.errorMessage,
        description = _ref2.description;
    return /*#__PURE__*/React.createElement(Checkbox, {
      disabled: disabled,
      onChange: function onChange() {},
      label: "Checkbox",
      checked: defaultValue,
      errorMessage: errorMessage,
      description: description,
      isValid: isValid
    });
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Flex, {
    extend: {
      flexDirection: 'row',
      paddingBottom: 20
    }
  }, /*#__PURE__*/React.createElement(DisplayWrapper, {
    name: "Unchecked"
  }, /*#__PURE__*/React.createElement(CheckboxWithValue, {
    description: "with helper text"
  })), /*#__PURE__*/React.createElement(DisplayWrapper, {
    name: "Checked"
  }, /*#__PURE__*/React.createElement(CheckboxWithValue, {
    defaultValue: true
  })), /*#__PURE__*/React.createElement(DisplayWrapper, {
    name: "Error"
  }, /*#__PURE__*/React.createElement(CheckboxWithValue, {
    isValid: false,
    errorMessage: "with error text",
    description: "with helper text"
  }))), /*#__PURE__*/React.createElement(Flex, {
    extend: {
      flexDirection: 'row',
      paddingBottom: 20
    }
  }, /*#__PURE__*/React.createElement(DisplayWrapper, {
    name: "Unchecked - Disabled"
  }, /*#__PURE__*/React.createElement(CheckboxWithValue, {
    disabled: true,
    description: "with helper text"
  })), /*#__PURE__*/React.createElement(DisplayWrapper, {
    name: "Checked - Disabled"
  }, /*#__PURE__*/React.createElement(CheckboxWithValue, {
    disabled: true,
    defaultValue: true
  }))));
};
export var WithLink = function WithLink() {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      checked = _useState2[0],
      setChecked = _useState2[1];

  return /*#__PURE__*/React.createElement(DisplayWrapper, {
    name: "Checkbox with a link"
  }, /*#__PURE__*/React.createElement(Checkbox, {
    onChange: function onChange() {
      return setChecked(!checked);
    },
    label: /*#__PURE__*/React.createElement(React.Fragment, null, "I accept the", ' ', /*#__PURE__*/React.createElement("a", {
      href: "/",
      onClick: function onClick(e) {
        e.stopPropagation();
        e.preventDefault();
      }
    }, "terms of service."), ' ', "This is a very long label to test mobile layout as well."),
    checked: checked
  }));
};
export var Container = function Container() {
  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      checked = _useState4[0],
      setChecked = _useState4[1];

  return /*#__PURE__*/React.createElement(DisplayWrapper, {
    name: "Checkbox within a direction=row container"
  }, /*#__PURE__*/React.createElement(View, {
    direction: "row",
    width: 200,
    bg: "rgb(240, 240, 240)",
    padding: 1
  }, /*#__PURE__*/React.createElement(Checkbox, {
    onChange: function onChange() {
      return setChecked(!checked);
    },
    label: "I am a long label and should wrap within my parent container",
    checked: checked
  })));
};
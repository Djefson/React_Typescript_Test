import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { useFela } from 'react-fela';
import { Click } from '../click';
import { Inline } from '../inline';
import { getLinkRel } from '../../helpers';

var Svg = function Svg(_ref) {
  var _ref$As = _ref.As,
      As = _ref$As === void 0 ? 'svg' : _ref$As,
      extend = _ref.extend,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["As", "extend", "children"]);

  var _useFela = useFela(props),
      css = _useFela.css;

  return /*#__PURE__*/React.createElement(As, _extends({
    className: css(extend)
  }, props), children);
};

var arrows = {
  left: 'M7 9.5l-4-4 4-4',
  right: 'M2 1.5l4 4-4 4',
  up: 'M1 6.5l4-4 4 4',
  down: 'M9 3.5l-4 4-4-4'
};

var Arrow = function Arrow(_ref2) {
  var arrowPath = _ref2.arrowPath,
      before = _ref2.before;
  return /*#__PURE__*/React.createElement(Svg, {
    extend: _objectSpread(_objectSpread({}, before ? {
      marginRight: '0.5rem'
    } : {
      marginLeft: '0.5rem'
    }), {}, {
      top: '0.0625rem',
      position: 'relative'
    }),
    preserveAspectRatio: "xMinYMin meet",
    viewBox: "0 0 11 11",
    width: "0.6875rem",
    height: "0.6875rem",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("path", {
    d: arrowPath,
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
};

export var Link = /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var children = _ref3.children,
      arrow = _ref3.arrow,
      props = _objectWithoutProperties(_ref3, ["children", "arrow"]);

  var _useFela2 = useFela(),
      theme = _useFela2.theme;

  var rel = getLinkRel(props);
  var resolveArrow = arrow;

  if (theme.direction === 'rtl') {
    if (arrow == 'right') {
      resolveArrow = 'left';
    }

    if (arrow == 'left') {
      resolveArrow = 'right';
    }
  }

  var arrowPath = arrows[resolveArrow];
  return /*#__PURE__*/React.createElement(Click, _extends({
    ref: ref,
    rel: rel
  }, props, {
    extend: {
      fontSize: '0.875rem',
      fontWeight: 500,
      letterSpacing: '0.02em',
      padding: '12px 0',
      lineHeight: '1.375rem',
      fontFamily: theme.fontTypes.NOVUM,
      textTransform: 'uppercase',
      color: theme.tokens.linkForeground,
      stroke: theme.tokens.linkForeground,
      extend: [{
        condition: props.disabled,
        style: {
          opacity: 0.3
        }
      }, {
        condition: !props.disabled,
        style: {
          '&:hover': {
            color: theme.tokens.linkHoverForeground,
            stroke: theme.tokens.linkHoverForeground
          },
          '&:active': {
            color: theme.tokens.linkHoverForeground,
            stroke: theme.tokens.linkHoverForeground
          }
        }
      }]
    }
  }), arrow && arrow === 'left' && /*#__PURE__*/React.createElement(Inline, {
    extend: {
      whiteSpace: 'nowrap'
    }
  }, /*#__PURE__*/React.createElement(Arrow, {
    before: true,
    arrowPath: arrowPath
  }), "\uFEFF"), children, arrow && arrow !== 'left' && /*#__PURE__*/React.createElement(Inline, {
    extend: {
      whiteSpace: 'nowrap'
    }
  }, "\uFEFF", /*#__PURE__*/React.createElement(Arrow, {
    arrowPath: arrowPath
  })));
});
Link.displayName = 'Link';
Link.propTypes = {
  /** A JSX node */
  children: PropTypes.node,
  href: PropTypes.string,
  arrow: PropTypes.oneOf(['up', 'down', 'right', 'left']),

  /** Disable link interaction */
  disabled: PropTypes.bool
};
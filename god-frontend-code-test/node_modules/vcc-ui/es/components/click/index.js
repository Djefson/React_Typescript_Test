import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import { Block } from '../block';
import { getLinkRel } from '../../helpers';
import { useConfig } from '../../config/use-config';
var buttonResetStyle = {
  background: 'none',
  margin: 0,
  padding: 0,
  textAlign: 'left',
  cursor: 'pointer',
  appearance: 'none',
  borderWidth: 0,
  touchAction: 'manipulation',
  '::-moz-focus-inner': {
    borderWidth: 0,
    padding: 0
  }
};
var linkResetStyle = {
  textDecoration: 'none'
};
export var Click = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      extend = _ref.extend,
      href = _ref.href,
      disabled = _ref.disabled,
      onClick = _ref.onClick,
      props = _objectWithoutProperties(_ref, ["children", "extend", "href", "disabled", "onClick"]);

  var config = useConfig();
  var hasHref = typeof href === 'string';
  var as = hasHref ? config.linkComponent : 'button';
  var rel = getLinkRel(props);
  return /*#__PURE__*/React.createElement(Block, _extends({}, props, {
    disabled: as === 'button' && disabled,
    href: !disabled && hasHref ? href : undefined,
    onClick: !disabled && onClick ? onClick : undefined,
    ref: ref,
    as: as,
    rel: rel,
    type: as === 'button' ? props.type || 'button' : null,
    extend: [{
      boxSizing: 'border-box'
    }, as === 'button' ? buttonResetStyle : linkResetStyle, extend]
  }), children);
});
Click.displayName = 'Click';
Click.propTypes = {
  /** An object containing valid CSS style declarations */
  extend: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.array]),

  /** Setting an href attribute will force the component to render with an `<a>` tag */
  href: PropTypes.string,

  /** If rendering a button (by not supplying an href), this let's you provide a type attribute for that button */
  type: PropTypes.string,

  /** A JSX node */
  children: PropTypes.node,

  /** Set the Click to disabled */
  disabled: PropTypes.bool,

  /** An action that is fired on click */
  onClick: PropTypes.func
};
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useFela } from 'react-fela';
import { Block } from '../block';
import { getThemeStyle } from '../../get-theme-style';
var hideOnScrollOffsetTop = 80;

var navStyle = function navStyle(_ref) {
  var theme = _ref.theme,
      sticky = _ref.sticky,
      hideOnScroll = _ref.hideOnScroll,
      isVisible = _ref.isVisible;
  return {
    position: 'relative',
    zIndex: 10,
    width: '100%',
    background: theme.color.background.primary,
    boxSizing: 'border-box',
    ':before': {
      content: "''",
      display: 'block',
      background: theme.color.ornament.divider,
      height: 1,
      outline: 'none',
      position: 'absolute',
      left: 0,
      right: 0,
      zIndex: -1,
      bottom: 0
    },
    extend: [{
      condition: sticky,
      style: {
        position: 'fixed',
        top: 0,
        left: 0
      }
    }, {
      condition: hideOnScroll,
      style: {
        transition: 'transform 200ms ease-out'
      }
    }, {
      condition: !isVisible,
      style: {
        transform: 'translateY(-100%)'
      }
    }]
  };
}; // using an external variable for performance reasons


var previousScrollY = 0;
export var Nav = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var hideOnScroll = _ref2.hideOnScroll,
      sticky = _ref2.sticky,
      children = _ref2.children;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      isVisible = _useState2[0],
      setVisible = _useState2[1];

  var _useFela = useFela(),
      theme = _useFela.theme;

  useEffect(function () {
    var toggleVisibility = function toggleVisibility() {
      if (window.scrollY > previousScrollY) {
        if (isVisible && window.scrollY > hideOnScrollOffsetTop) {
          setVisible(false);
        }
      } else {
        if (!isVisible) {
          setVisible(true);
        }
      }

      previousScrollY = window.scrollY;
    };

    if (hideOnScroll) {
      window.addEventListener('scroll', toggleVisibility);
    }

    return function () {
      window.removeEventListener('scroll', toggleVisibility);
    };
  }, [hideOnScroll, isVisible]);
  var styleProps = {
    sticky: sticky,
    hideOnScroll: hideOnScroll,
    isVisible: isVisible,
    theme: theme
  };
  return /*#__PURE__*/React.createElement(Block, {
    as: "nav",
    ref: ref,
    extend: [navStyle(styleProps), getThemeStyle('nav', theme, styleProps)]
  }, children);
});
Nav.displayName = 'Nav';
Nav.propTypes = {
  /** Automatically hide the sticky navigation if the user starts scrolling */
  hideOnScroll: PropTypes.bool,

  /** Make the navigation stick to the top of the viewport */
  sticky: PropTypes.bool,

  /** A JSX node */
  children: PropTypes.node
};
Nav.defaultProps = {
  hideOnScroll: false,
  sticky: false
};
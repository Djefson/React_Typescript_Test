import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { createContext, useContext } from 'react';
import { useFela } from 'react-fela';
import { Flex } from '../flex';
import PropTypes from 'prop-types';
var ColContext = /*#__PURE__*/createContext();
var styles = {
  column: function column(_ref) {
    var _ref2;

    var theme = _ref.theme,
        _ref$sizes = _ref.sizes,
        defaultSize = _ref$sizes.default,
        otherSizes = _objectWithoutProperties(_ref$sizes, ["default"]);

    return _ref2 = {
      boxSizing: 'border-box',
      flexBasis: "".concat(defaultSize / 4 * 100, "%"),
      maxWidth: "".concat(defaultSize / 4 * 100, "%"),
      paddingLeft: theme.baselineGrid,
      paddingRight: theme.baselineGrid
    }, _defineProperty(_ref2, theme.breakpoints.fromL, {
      flexBasis: "".concat(defaultSize / 12 * 100, "%"),
      maxWidth: "".concat(defaultSize / 12 * 100, "%"),
      paddingLeft: theme.baselineGrid * 1.5,
      paddingRight: theme.baselineGrid * 1.5
    }), _defineProperty(_ref2, "extend", [{
      condition: otherSizes[theme.breakpoints.fromM],
      style: _defineProperty({}, theme.breakpoints.onlyM, {
        flexBasis: "".concat(otherSizes[theme.breakpoints.fromM] / 4 * 100, "%"),
        maxWidth: "".concat(otherSizes[theme.breakpoints.fromM] / 4 * 100, "%")
      })
    }, {
      condition: otherSizes[theme.breakpoints.fromL],
      style: _defineProperty({}, theme.breakpoints.fromL, {
        flexBasis: "".concat(otherSizes[theme.breakpoints.fromL] / 12 * 100, "%"),
        maxWidth: "".concat(otherSizes[theme.breakpoints.fromL] / 12 * 100, "%")
      })
    }]), _ref2;
  }
};

function getSizes(size, theme) {
  if (typeof size === 'number') {
    return _defineProperty({
      default: 4
    }, theme.breakpoints.fromL, size);
  }

  return _objectSpread({
    default: 4
  }, size);
}

function getRealSizes(size, contextSize, theme) {
  var sizes = getSizes(size, theme);

  if (!contextSize) {
    return sizes;
  }

  var availableSizes = getSizes(contextSize, theme);
  var realSizes = {};

  for (var key in sizes) {
    if (availableSizes[key]) {
      if (key === theme.breakpoints.fromL) {
        realSizes[key] = 12 / availableSizes[key] * sizes[key];
      } else {
        realSizes[key] = 4 / availableSizes[key] * sizes[key];
      }
    } else {
      realSizes[key] = sizes[key];
    }
  }

  return realSizes;
}

function resolveNamedBreakpoints(size, breakpoints) {
  if (typeof size === 'number') {
    return size;
  }

  return Object.keys(size).reduce(function (resolvedSize, key) {
    var breakpoint = breakpoints[key] || key;
    resolvedSize[breakpoint] = size[key];
    return resolvedSize;
  }, {});
}

export function Col(_ref4) {
  var _ref4$size = _ref4.size,
      size = _ref4$size === void 0 ? {
    default: 4,
    '@media (min-width: 1024px)': 12
  } : _ref4$size,
      children = _ref4.children;

  var _useFela = useFela(),
      theme = _useFela.theme;

  var contextSize = useContext(ColContext);
  var resolvedSize = resolveNamedBreakpoints(size, theme.breakpoints);
  var styleProps = {
    sizes: getRealSizes(resolvedSize, contextSize, theme),
    theme: theme
  };
  return /*#__PURE__*/React.createElement(ColContext.Provider, {
    value: resolvedSize
  }, /*#__PURE__*/React.createElement(Flex, {
    extend: styles.column(styleProps)
  }, children));
}
Col.propTypes = {
  /** Size of column */
  size: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),

  /** A JSX node */
  children: PropTypes.node
};
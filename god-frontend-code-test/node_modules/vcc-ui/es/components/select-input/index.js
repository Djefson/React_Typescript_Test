import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { useFela } from 'react-fela';
import { func, string, bool, node } from 'prop-types';
import { Block } from '../block';
import { Flex } from '../flex';
import { Spacer } from '../spacer';
import { Spinner } from '../spinner';
import { Message } from '../message';
import { useId, makeIdList, makeId } from '../../auto-id';
import { getThemeStyle } from '../../get-theme-style';
import { deprecate } from '../../deprecate';
var LEGACY_PADDING = 16;
var FIREFOX_INNER_PADDING = 4;

var arrowIcon = function arrowIcon(color) {
  return "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='9' viewBox='0 0 16 9' fill='none' %3E %3Cpath d='M15 1L8 8L1 1' stroke='".concat(encodeURIComponent(color), "' stroke-linecap='round' stroke-linejoin='round'%3E %3C/path%3E %3C/svg%3E\")");
};

var styles = function styles(_ref) {
  var loading = _ref.loading,
      theme = _ref.theme,
      isValid = _ref.isValid,
      hasLabel = _ref.hasLabel;
  return _objectSpread(_objectSpread({}, theme.typeScale.columbus.standard.styles), {}, {
    appearance: 'none',
    borderWidth: 1,
    borderStyle: 'solid',
    borderRadius: 4,
    boxSizing: 'border-box',
    display: 'block',
    width: '100%',
    margin: 0,
    outline: 0,
    paddingTop: theme.tokens.inputPaddingVertical * 2,
    paddingBottom: theme.tokens.inputPaddingVertical / 2,
    paddingLeft: theme.tokens.inputPaddingHorizontal - 1,
    paddingRight: theme.tokens.inputPaddingHorizontal - 1 + (loading ? 0 : 30),
    color: theme.tokens.inputForeground,
    backgroundColor: theme.tokens.inputBackground,
    backgroundImage: arrowIcon(theme.tokens.inputForeground),
    backgroundSize: '15px 7px',
    backgroundPosition: 'right 18px top 51%',
    backgroundRepeat: 'no-repeat',
    userSelect: 'none',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    borderColor: isValid ? theme.tokens.inputBorder : theme.color.foreground.alert,
    ':disabled': {
      cursor: 'not-allowed',
      borderColor: theme.tokens.inputDisabledBorder,
      backgroundColor: theme.tokens.inputDisabledBackground,
      color: theme.tokens.inputForeground,
      '& + label': {
        cursor: 'not-allowed'
      }
    },
    '& option:disabled': {
      color: theme.tokens.inputForeground
    },
    ':invalid': {
      color: theme.tokens.inputPlaceholder
    },
    ':focus:invalid': {
      color: theme.tokens.inputPlaceholder
    },
    '::-ms-expand': {
      display: 'none'
    },
    '::-ms-value': {
      background: 'none',
      color: theme.tokens.inputForeground
    },
    ':valid': {
      color: theme.tokens.inputForeground
    },
    '& option': {
      color: theme.tokens.inputForeground
    },
    ':-moz-focusring': {
      color: 'transparent',
      textShadow: '0 0 0 #000'
    },
    ':focus': {
      color: theme.tokens.inputForeground,
      borderColor: theme.tokens.inputBorderFocus,
      '& + label': {
        transform: 'translateY(8px)',
        fontSize: 12
      }
    },
    // firefox has some weird inner padding
    '@supports (-moz-appearance: none)': {
      paddingLeft: theme.tokens.inputPaddingHorizontal - FIREFOX_INNER_PADDING - 1
    },
    extend: [{
      condition: loading,
      style: {
        backgroundImage: 'none',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        width: '100%'
      }
    }, {
      condition: !isValid,
      style: {
        ':not(:focus)': {
          borderWidth: 2,
          backgroundPosition: 'right 17px top 51%',
          borderColor: theme.color.foreground.alert,
          paddingTop: theme.tokens.inputPaddingVertical * 2 - 1,
          paddingBottom: theme.tokens.inputPaddingVertical / 2 - 1,
          paddingLeft: theme.tokens.inputPaddingHorizontal - 2,
          paddingRight: theme.tokens.inputPaddingHorizontal - 2 + (loading ? 0 : 30),
          // firefox has some weird inner padding
          '@supports (-moz-appearance: none)': {
            paddingLeft: theme.tokens.inputPaddingHorizontal - FIREFOX_INNER_PADDING - 2
          }
        }
      }
    }, {
      condition: !hasLabel,
      style: {
        paddingTop: LEGACY_PADDING - 1,
        paddingBottom: LEGACY_PADDING - 1,
        extend: [{
          condition: !isValid,
          style: {
            ':not(:focus)': {
              borderWidth: 2,
              borderColor: theme.color.foreground.alert,
              paddingTop: LEGACY_PADDING - 2,
              paddingBottom: LEGACY_PADDING - 2,
              paddingLeft: theme.tokens.inputPaddingHorizontal - 2,
              paddingRight: theme.tokens.inputPaddingHorizontal - 2 + (loading ? 0 : 30)
            }
          }
        }]
      }
    }]
  });
};

var labelStyle = function labelStyle(_ref2) {
  var isEmpty = _ref2.isEmpty,
      isValid = _ref2.isValid,
      theme = _ref2.theme;
  return {
    paddingLeft: theme.tokens.inputPaddingHorizontal,
    paddingRight: theme.tokens.inputPaddingHorizontal,
    color: isValid ? theme.color.foreground.secondary : theme.color.foreground.alert,
    transitionProperty: 'font-size, transform',
    transitionDuration: '60ms',
    transitionTimingFunction: 'ease-out',
    transform: 'translateY(' + (isEmpty ? 17 : 8) + 'px)',
    fontSize: isEmpty ? 16 : 12,
    letterSpacing: '0.02em',
    fontFamily: theme.fontTypes.NOVUM,
    fontWeight: 300,
    position: 'absolute',
    pointerEvents: 'none'
  };
};

export var SelectInput = /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var children = _ref3.children,
      disabled = _ref3.disabled,
      _ref3$value = _ref3.value,
      value = _ref3$value === void 0 ? '' : _ref3$value,
      _ref3$label = _ref3.label,
      label = _ref3$label === void 0 ? '' : _ref3$label,
      _ref3$description = _ref3.description,
      description = _ref3$description === void 0 ? '' : _ref3$description,
      _ref3$errorMessage = _ref3.errorMessage,
      errorMessage = _ref3$errorMessage === void 0 ? '' : _ref3$errorMessage,
      _ref3$isValid = _ref3.isValid,
      isValid = _ref3$isValid === void 0 ? true : _ref3$isValid,
      _ref3$loading = _ref3.loading,
      loading = _ref3$loading === void 0 ? false : _ref3$loading,
      props = _objectWithoutProperties(_ref3, ["children", "disabled", "value", "label", "description", "errorMessage", "isValid", "loading"]);

  var _useFela = useFela(),
      theme = _useFela.theme; // legacy check


  var hasLabel = label.length > 0;
  deprecate('Unlabelled select-input fields are deprecated and will be removed in 3.0.0. Pass a label prop.', !hasLabel);
  var isEmpty = value.length === 0;
  var styleProps = {
    isEmpty: isEmpty,
    hasLabel: hasLabel,
    isValid: isValid,
    loading: loading,
    disabled: disabled,
    theme: theme
  };
  var id = useId('vcc-ui-select-input', props.id);
  var errorMessageId = makeId(id, 'error');
  var descriptionId = makeId(id, 'description');
  var describedBy = makeIdList([errorMessage && errorMessageId, description && descriptionId]);
  var messages = /*#__PURE__*/React.createElement(React.Fragment, null, errorMessage || description ? /*#__PURE__*/React.createElement(Spacer, {
    size: 0.5
  }) : null, errorMessage ? /*#__PURE__*/React.createElement(Message, {
    type: "error",
    id: errorMessageId
  }, errorMessage) : null, description ? /*#__PURE__*/React.createElement(Message, {
    id: descriptionId
  }, description) : null);

  if (loading) {
    return /*#__PURE__*/React.createElement(Flex, {
      extend: {
        flexDirection: 'column',
        width: '100%'
      }
    }, /*#__PURE__*/React.createElement(Block, {
      ref: ref,
      extend: [styles(_objectSpread(_objectSpread({}, styleProps), {}, {
        hasLabel: false
      })), getThemeStyle('selectInput', theme, _objectSpread(_objectSpread({}, styleProps), {}, {
        hasLabel: false
      }))]
    }, /*#__PURE__*/React.createElement(Spinner, {
      color: theme.tokens.inputForeground,
      size: 24
    })), messages);
  }

  return /*#__PURE__*/React.createElement(Flex, {
    extend: {
      flexDirection: 'column',
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(Flex, {
    extend: {
      position: 'relative'
    }
  }, /*#__PURE__*/React.createElement(Block, _extends({}, props, {
    ref: ref,
    as: "select",
    id: id,
    extend: [styles(styleProps), getThemeStyle('selectInput', theme, styleProps)],
    disabled: disabled,
    value: value
  }, describedBy && {
    'aria-describedby': describedBy
  }), isEmpty ? /*#__PURE__*/React.createElement("option", {
    disabled: true,
    value: value
  }) : null, children), hasLabel ? /*#__PURE__*/React.createElement(Block, {
    as: "label",
    htmlFor: id,
    extend: labelStyle(styleProps)
  }, label) : null), messages);
});
SelectInput.propTypes = {
  /** Renders a label inside the input.  */
  label: string,

  /** Renders a neutral helper message underneath the input.  */
  description: string,

  /** Renders a red error message for validation underneath the input.  */
  errorMessage: string,
  id: string,
  name: string,
  onChange: func.isRequired,
  value: string,
  disabled: bool,
  loading: bool,
  children: node,
  isValid: bool
};
SelectInput.displayName = 'SelectInput';
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from 'react';
import { bool, func } from 'prop-types';
import { useFela } from 'react-fela';
import { Inline } from '../inline';
var rootStyle = {
  width: 40,
  height: 25,
  position: 'relative',
  display: 'inline-block',
  verticalAlign: 'middle',
  flexGrow: 0,
  flexShrink: 0
};

var inputStyle = function inputStyle() {
  return {
    appearance: 'none',
    border: 'none',
    ':focus + span span': {
      boxShadow: '0 0 2px #000'
    }
  };
};

var backgroundStyle = function backgroundStyle(_ref) {
  var checked = _ref.checked,
      theme = _ref.theme,
      disabled = _ref.disabled,
      isValid = _ref.isValid;
  return {
    position: 'absolute',
    borderWidth: 1,
    borderStyle: 'solid',
    borderRadius: 45,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    outline: 0,
    padding: 0,
    borderColor: theme.tokens.inputBorder,
    extend: [{
      condition: !isValid,
      style: {
        borderColor: theme.color.foreground.alert
      }
    }, {
      condition: disabled,
      style: {
        borderColor: theme.tokens.inputDisabledBorder
      }
    }],
    transition: 'background 300ms cubic-bezier(0.230, 1.000, 0.320, 1.000)',
    background: checked ? theme.color.ornament.highlight : theme.color.background.primary,
    cursor: disabled ? 'not-allowed' : 'pointer',
    '& span': {
      position: 'absolute',
      bottom: 2,
      left: 2,
      width: 17,
      height: 17,
      borderWidth: 1,
      boxShadow: '0px 0px 1px inset ' + theme.color.foreground.secondary,
      borderStyle: 'solid',
      background: theme.color.background.primary,
      borderColor: disabled ? theme.tokens.inputDisabledBorder : theme.tokens.inputBorder,
      borderRadius: '50%',
      transition: 'transform 300ms cubic-bezier(0.230, 1.000, 0.320, 1.000)',
      transform: checked ? 'translateX(15px)' : 'translateX(0px)'
    }
  };
};

export var Toggle = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var checked = _ref2.checked,
      disabled = _ref2.disabled,
      onChange = _ref2.onChange,
      _ref2$isValid = _ref2.isValid,
      isValid = _ref2$isValid === void 0 ? true : _ref2$isValid,
      props = _objectWithoutProperties(_ref2, ["checked", "disabled", "onChange", "isValid"]);

  var _useFela = useFela(),
      theme = _useFela.theme;

  return /*#__PURE__*/React.createElement(Inline, {
    as: "label",
    extend: rootStyle
  }, /*#__PURE__*/React.createElement(Inline, _extends({
    ref: ref,
    as: "input",
    type: "checkbox",
    extend: inputStyle(),
    checked: checked,
    onChange: onChange,
    disabled: disabled
  }, props)), /*#__PURE__*/React.createElement(Inline, {
    "aria-label": "toggle",
    extend: backgroundStyle({
      checked: checked,
      theme: theme,
      disabled: disabled,
      isValid: isValid
    })
  }, /*#__PURE__*/React.createElement(Inline, null)));
});
Toggle.displayName = 'Toggle';
Toggle.propTypes = {
  onChange: func.isRequired,
  checked: bool,
  disabled: bool,
  isValid: bool
};
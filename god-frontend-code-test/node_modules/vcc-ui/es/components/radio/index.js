import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useContext } from 'react';
import { useFela } from 'react-fela';
import { string, bool, func } from 'prop-types';
import { View } from '../view';
import { Block } from '../block';
import { RadioContext } from '../radioGroup';
import { getThemeStyle } from '../../get-theme-style';
import { deprecate } from '../../deprecate';
import { useId } from '../../auto-id';

var radioStyle = function radioStyle(_ref) {
  var theme = _ref.theme,
      isValid = _ref.isValid;
  return {
    boxSizing: 'border-box',
    borderWidth: 1,
    borderStyle: 'solid',
    appearance: 'none',
    borderRadius: '50%',
    flexShrink: 0,
    width: 20,
    height: 20,
    margin: 0,
    padding: 0,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
    cursor: 'pointer',
    borderColor: theme.tokens.inputControlBorder,
    backgroundColor: theme.tokens.inputBackground,
    outline: 0,
    extend: [{
      condition: !isValid,
      style: {
        borderColor: theme.color.foreground.alert,
        borderWidth: 2
      }
    }, {
      condition: isValid,
      style: {
        ':focus': {
          borderColor: theme.tokens.inputBorderFocus
        }
      }
    }],
    ':checked': {
      backgroundColor: theme.tokens.inputControlBackground,
      borderColor: theme.tokens.inputControlBackground,
      ':before': {
        borderRadius: '50%',
        display: 'block',
        content: "''",
        width: 8,
        height: 8,
        position: 'absolute',
        backgroundColor: theme.tokens.inputControlForeground
      }
    },
    ':disabled': {
      cursor: 'not-allowed',
      borderColor: theme.tokens.inputDisabledBorder,
      backgroundColor: theme.tokens.inputDisabledBackground,
      ':checked': {
        borderColor: theme.tokens.inputDisabledBorder,
        backgroundColor: theme.tokens.inputDisabledBackground,
        ':before': {
          backgroundColor: theme.tokens.inputDisabledControl
        }
      }
    }
  };
};

var labelStyle = function labelStyle(_ref2) {
  var theme = _ref2.theme,
      isValid = _ref2.isValid;
  return {
    color: isValid ? theme.color.foreground.secondary : theme.color.foreground.alert,
    fontSize: 16,
    letterSpacing: '0.02em',
    marginTop: -1,
    fontFamily: theme.fontTypes.NOVUM,
    fontWeight: 300
  };
};

export var Radio = /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var userIsValid = _ref3.isValid,
      userValue = _ref3.value,
      userOnChange = _ref3.onChange,
      userChecked = _ref3.checked,
      userName = _ref3.name,
      _ref3$label = _ref3.label,
      label = _ref3$label === void 0 ? '' : _ref3$label,
      props = _objectWithoutProperties(_ref3, ["isValid", "value", "onChange", "checked", "name", "label"]);

  var _useFela = useFela(),
      theme = _useFela.theme;

  var _useContext = useContext(RadioContext),
      name = _useContext.name,
      value = _useContext.value,
      isValid = _useContext.isValid,
      _onChange = _useContext.onChange;

  var styleProps = {
    isValid: userIsValid !== undefined ? userIsValid : isValid !== undefined ? isValid : true,
    theme: theme
  };
  var id = useId(name ? name + '-' + userValue : userValue, props.id);
  var checked = userChecked || value === userValue; // legacy check

  var hasLabel = label.length > 0;
  deprecate('Unlabelled radio-input fields are deprecated and will be removed in 3.0.0. Pass a label prop.', !hasLabel);
  var hasValue = value && value.length > 0;
  deprecate('Radio buttons with no value provided are deprecated and will be removed in 3.0.0. Pass a value prop.', !hasValue);
  return /*#__PURE__*/React.createElement(View, {
    spacing: 1,
    direction: "row",
    alignItems: "center",
    shrink: 1
  }, /*#__PURE__*/React.createElement(Block, _extends({
    ref: ref,
    onChange: function onChange(event) {
      if (userOnChange) {
        userOnChange(event);
      } else if (_onChange) {
        _onChange(event);
      }
    },
    checked: checked
  }, props, {
    as: "input",
    type: "radio",
    value: userValue,
    name: name || userName,
    id: id,
    extend: [radioStyle(styleProps), getThemeStyle('radio', theme, styleProps)]
  })), !hasLabel ? null : /*#__PURE__*/React.createElement(Block, {
    as: "label",
    htmlFor: id,
    style: labelStyle(styleProps)
  }, label));
});
Radio.displayName = 'Radio';
Radio.propTypes = {
  onChange: func,
  checked: bool,

  /** Should be the same for all radio buttons belonging to same group. */
  name: string,
  id: string,
  isValid: bool,

  /** Value of the radio button. */
  value: string,

  /** The label text that is associated with the radio button. */
  label: string
};
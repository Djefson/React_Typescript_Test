import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import { useFela } from 'react-fela';
import { Click } from '../click';
import { Arrow } from '../arrow';
import { Inline } from '../inline';
import { getThemeStyle } from '../../get-theme-style';

var navItemStyle = function navItemStyle(_ref) {
  var _ref2;

  var isActive = _ref.isActive,
      isDropdown = _ref.isDropdown,
      theme = _ref.theme;
  return _ref2 = {
    color: theme.color.foreground.primary,
    fontSize: 20,
    padding: '18px 0',
    minHeight: 20,
    alignItems: 'center',
    textAlign: 'left',
    boxSizing: 'content-box',
    fontWeight: 300,
    fontFamily: theme.fontTypes.NOVUM,
    letterSpacing: 0.3,
    borderBottomWidth: 1,
    borderBottomStyle: 'solid',
    borderBottomColor: theme.color.ornament.divider
  }, _defineProperty(_ref2, theme.breakpoints.untilL, {
    width: '100%',
    display: 'block',
    extend: {
      condition: isDropdown,
      style: {
        display: 'flex',
        justifyContent: 'space-between'
      }
    }
  }), _defineProperty(_ref2, theme.breakpoints.fromL, {
    padding: '25px 0',
    fontSize: 16,
    display: 'inline-block',
    borderBottomWidth: 3,
    borderBottomColor: 'transparent',
    marginRight: 20,
    ':last-child': {
      marginRight: 0
    },
    ':focus': {
      outline: 'none',
      extend: {
        condition: !isActive,
        style: {
          borderBottomColor: theme.color.ornament.highlight
        }
      }
    },
    ':focus:not(:focus-visible)': {
      borderBottomColor: 'transparent'
    },
    ':hover': {
      borderBottomColor: theme.color.ornament.highlight
    },
    extend: {
      condition: isActive,
      style: {
        borderBottomColor: theme.color.ornament.highlight
      }
    }
  }), _ref2;
};

export var NavItem = /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var _ref4, _ref5;

  var children = _ref3.children,
      _ref3$isDropdown = _ref3.isDropdown,
      isDropdown = _ref3$isDropdown === void 0 ? false : _ref3$isDropdown,
      _ref3$isActive = _ref3.isActive,
      isActive = _ref3$isActive === void 0 ? false : _ref3$isActive,
      props = _objectWithoutProperties(_ref3, ["children", "isDropdown", "isActive"]);

  var _useFela = useFela(),
      theme = _useFela.theme;

  var styleProps = {
    isActive: isActive,
    isDropdown: isDropdown,
    theme: theme
  };

  var _getThemeStyle = getThemeStyle('navItemArrow', theme),
      _getThemeStyle$size = _getThemeStyle.size,
      size = _getThemeStyle$size === void 0 ? 14 : _getThemeStyle$size,
      _getThemeStyle$color = _getThemeStyle.color,
      color = _getThemeStyle$color === void 0 ? theme.tokens.inputControl : _getThemeStyle$color;

  return /*#__PURE__*/React.createElement(Click, _extends({
    ref: ref
  }, props, {
    extend: [navItemStyle(styleProps), getThemeStyle('navItem', theme, styleProps)]
  }), children, isDropdown && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Inline, {
    extend: (_ref4 = {}, _defineProperty(_ref4, theme.breakpoints.untilL, {
      display: 'none'
    }), _defineProperty(_ref4, "marginLeft", 8), _defineProperty(_ref4, "verticalAlign", 'middle'), _ref4)
  }, /*#__PURE__*/React.createElement(Arrow, {
    direction: isActive ? 'up' : 'down',
    size: size,
    color: color
  })), /*#__PURE__*/React.createElement(Inline, {
    extend: (_ref5 = {}, _defineProperty(_ref5, theme.breakpoints.fromL, {
      display: 'none'
    }), _defineProperty(_ref5, "marginLeft", 8), _defineProperty(_ref5, "verticalAlign", 'middle'), _ref5)
  }, /*#__PURE__*/React.createElement(Arrow, {
    direction: 'right',
    size: size,
    color: color
  }))));
});
NavItem.displayName = 'NavItem';
NavItem.propTypes = {
  children: PropTypes.node,

  /** Indicate if the NavItem will open a dropdown menu */
  isDropdown: PropTypes.bool,

  /** Indicate if the NavItem is in an active state */
  isActive: PropTypes.bool
};
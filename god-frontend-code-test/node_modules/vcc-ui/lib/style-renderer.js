"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.styleRenderer = styleRenderer;
exports.responsiveProps = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _fela = require("fela");

var _felaPluginRtl = _interopRequireDefault(require("fela-plugin-rtl"));

var _hexToRgba = _interopRequireDefault(require("hex-to-rgba"));

var _felaSortClassnames = _interopRequireDefault(require("fela-sort-classnames"));

var _felaSortMediaQueryMobileFirst = _interopRequireDefault(require("fela-sort-media-query-mobile-first"));

var _felaPluginResponsiveValue = _interopRequireDefault(require("fela-plugin-responsive-value"));

var _felaPluginThemeValue = _interopRequireDefault(require("fela-plugin-theme-value"));

var _felaPluginExtend = _interopRequireDefault(require("fela-plugin-extend"));

var _felaPluginEmbedded = _interopRequireDefault(require("fela-plugin-embedded"));

var _felaPluginPrefixer = _interopRequireDefault(require("fela-plugin-prefixer"));

var _felaPluginFallbackValue = _interopRequireDefault(require("fela-plugin-fallback-value"));

var _felaPluginUnit = _interopRequireDefault(require("fela-plugin-unit"));

var _felaPluginNamedKeys = _interopRequireDefault(require("fela-plugin-named-keys"));

var _cssInJsUtils = require("css-in-js-utils");

var _felaTools = require("fela-tools");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// whitelisting all the props that support responsive array values
var responsiveProps = {
  padding: true,
  paddingLeft: true,
  paddingRight: true,
  paddingBottom: true,
  paddingTop: true,
  margin: true,
  marginLeft: true,
  marginRight: true,
  marginBottom: true,
  marginTop: true,
  width: true,
  height: true,
  minWidth: true,
  minHeight: true,
  maxWidth: true,
  maxHeight: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  flexBasis: true,
  alignSelf: true,
  alignItems: true,
  alignContent: true,
  justifyContent: true,
  flexDirection: true,
  flexWrap: true,
  order: true,
  display: true
};
exports.responsiveProps = responsiveProps;

var getResponsiveMediaQueries = function getResponsiveMediaQueries(values, props) {
  var _props$theme$breakpoi = props.theme.breakpoints,
      fromM = _props$theme$breakpoi.fromM,
      fromL = _props$theme$breakpoi.fromL,
      fromXL = _props$theme$breakpoi.fromXL;
  var mediaQueryMap = {
    2: [fromM],
    3: [fromM, fromL],
    4: [fromM, fromL, fromXL]
  };
  return mediaQueryMap[values.length];
};

function styleRenderer() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      isRtl = _ref.isRtl,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["isRtl"]);

  var options = rest || {};
  return (0, _fela.createRenderer)(_objectSpread(_objectSpread({}, options), {}, {
    enhancers: [(0, _felaSortClassnames.default)(), (0, _felaSortMediaQueryMobileFirst.default)()].concat((0, _toConsumableArray2.default)(options.enhancers || [])),
    plugins: [responsiveObjectValue(responsiveProps), (0, _felaPluginExtend.default)(), (0, _felaPluginEmbedded.default)(), (0, _felaPluginResponsiveValue.default)(getResponsiveMediaQueries, responsiveProps), (0, _felaPluginPrefixer.default)(), (0, _felaPluginFallbackValue.default)(), (0, _felaPluginUnit.default)(), (0, _felaPluginNamedKeys.default)(function (props) {
      return props && props.theme && props.theme.breakpoints || {};
    }), themeFontsPlugin, hexToRgbaPlugin, (0, _felaPluginRtl.default)(isRtl ? 'rtl' : 'ltr'), (0, _felaPluginThemeValue.default)({
      color: function color(theme) {
        return theme.color;
      },
      backgroundColor: function backgroundColor(theme) {
        return theme.color;
      }
    })].concat((0, _toConsumableArray2.default)(options.plugins || [])).filter(Boolean)
  }));
} // TODO: move to fela repo as an official plugin


function themeFontsPlugin(style, type, renderer, props) {
  var fonts = props.theme && props.theme.fonts || [];
  var fontsPath = props.theme && props.theme.fontsPath || '';

  for (var property in style) {
    var value = style[property]; // TODO: maybe we wanna cache already rendered fonts
    // but no high prio as Fela does that as well

    if (typeof value === 'string' && property === 'fontFamily') {
      (function () {
        // check each alternative font value
        var fontValues = value.split(',');
        var usedFonts = fonts.filter(function (font) {
          return fontValues.indexOf(font.fontFamily) !== -1;
        });

        if (usedFonts.length > 0) {
          usedFonts.forEach(function (_ref2) {
            var fontFamily = _ref2.fontFamily,
                src = _ref2.src,
                fontProps = (0, _objectWithoutProperties2.default)(_ref2, ["fontFamily", "src"]);
            return renderer.renderFont(fontFamily, src.map( // allow absolute files with http prefix
            function (file) {
              return (file.indexOf('http') === -1 ? fontsPath : '') + file;
            }), fontProps);
          });
        }
      })();
    } else if ((0, _typeof2.default)(value) === 'object' && !Array.isArray(value)) {
      themeFontsPlugin(value, type, renderer, props);
    }
  }

  return style;
} // TODO: move to fela repo as an official plugin


function hexToRgbaPlugin(style) {
  for (var property in style) {
    var value = style[property];

    if (typeof value === 'string' && value.indexOf('#') === 0 && value.length === 9) {
      style[property] = (0, _hexToRgba.default)(value);
    } else if ((0, _typeof2.default)(value) === 'object' && !Array.isArray(value)) {
      hexToRgbaPlugin(value);
    }
  }

  return style;
} // TODO: move to fela repo as an official plugin


function resolveResponsiveObjectValues(style, properties) {
  var _loop = function _loop(property) {
    if (properties[property]) {
      var value = style[property];

      if ((0, _typeof2.default)(value) === 'object' && !Array.isArray(value)) {
        var defaultValue = value.default,
            mediaValues = (0, _objectWithoutProperties2.default)(value, ["default"]);
        (0, _cssInJsUtils.assignStyle)(style, (0, _defineProperty2.default)({}, property, defaultValue), {
          extend: [(0, _felaTools.mapValueToMediaQuery)(mediaValues, function (value) {
            return (0, _defineProperty2.default)({}, property, value);
          })]
        });
      }
    }
  };

  for (var property in style) {
    _loop(property);
  }

  return style;
}

function responsiveObjectValue() {
  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (style) {
    return resolveResponsiveObjectValues(style, properties);
  };
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.legacyColors = void 0;

var _deprecate = require("../deprecate");

/* Old colors, deprecated */

/* Pending for removal in 3.x */
var colorWarn = function colorWarn(name, color) {
  (0, _deprecate.deprecate)(name + ' in theme.colors is deprecated, please use theme.color decisions instead', true);
  return color;
};

var legacyColors = {
  get black() {
    return colorWarn('black', '#000');
  },

  get white() {
    return colorWarn('white', '#fff');
  },

  get primary() {
    return colorWarn('primary', '#1c6bba');
  },

  get destructive() {
    return colorWarn('destructive', '#bf2012');
  },

  get grey1() {
    return colorWarn('grey1', 'rgb(30, 30, 30)');
  },

  get grey2() {
    return colorWarn('grey2', 'rgb(65, 65, 65)');
  },

  get grey3() {
    return colorWarn('grey3', 'rgb(100, 100,100)');
  },

  get grey4() {
    return colorWarn('grey4', 'rgb(135, 135, 135)');
  },

  get grey5() {
    return colorWarn('grey5', 'rgb(165, 165, 165)');
  },

  get grey6() {
    return colorWarn('grey6', 'rgb(195, 195, 195)');
  },

  get grey7() {
    return colorWarn('grey7', 'rgb(225, 225, 225)');
  },

  get grey8() {
    return colorWarn('grey8', 'rgb(240, 240, 240)');
  },

  get primaryLight() {
    return colorWarn('primaryLight', '#008ae6');
  },

  get secondary() {
    return colorWarn('secondary', '#000000');
  },

  get secondaryLight() {
    return colorWarn('secondaryLight', '#161618');
  },

  get destructiveLight() {
    return colorWarn('destruciveLight', '#db0f4f');
  }

};
exports.legacyColors = legacyColors;
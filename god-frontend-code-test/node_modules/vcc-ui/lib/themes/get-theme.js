"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTheme = getTheme;
exports.FONT_WEIGHTS = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _sizeToRem = require("../size-to-rem");

var _lineHeightToNumber = require("../line-height-to-number");

var _buildTypeScale = require("../build-type-scale");

var _legacyColors = require("./legacy-colors");

var _fonts = require("./fonts");

var _tokens = _interopRequireDefault(require("@volvo-cars/ui-design-tokens/build/web/volvo/tokens.json"));

var _tokens2 = _interopRequireDefault(require("@volvo-cars/ui-design-tokens/build/web/volvo-dark/tokens.json"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var breakpointSizes = {
  m: 480,
  l: 1024,
  xl: 1600
}; // there is no fromS as that'd be the default styles and we do not want
// those to be part of a min-width: 0px media queries due to CSS performance

var breakpoints = {
  // duplicate of untilM
  // > 0 && < 480
  get onlyS() {
    return this.untilM;
  },

  // < 480
  untilM: '@media (max-width: ' + (breakpointSizes.m - 1) + 'px)',
  // >= 480
  fromM: '@media (min-width: ' + breakpointSizes.m + 'px)',

  // >= 480 && < 1024
  get onlyM() {
    return this.fromM + ' and ' + this.untilL.substring(7);
  },

  // < 1024
  untilL: '@media (max-width: ' + (breakpointSizes.l - 1) + 'px)',
  // >= 1024
  fromL: '@media (min-width: ' + breakpointSizes.l + 'px)',

  // >= 1024 && < 1600
  get onlyL() {
    return this.fromL + ' and ' + this.untilXL.substring(7);
  },

  // < 1600
  untilXL: '@media (max-width: ' + (breakpointSizes.xl - 1) + 'px)',
  // >= 1600
  fromXL: '@media (min-width: ' + breakpointSizes.xl + 'px)',

  // duplicate of fromXL
  // >= 1600
  get onlyXL() {
    return this.fromXL;
  }

};
var icons = ['account', 'email', 'search', 'globe', 'facebook', 'twitter', 'youtube', 'linkedin', 'instagram', 'pinterest', 'youku', 'vkontakte', 'wechat', 'weibo'];
var FONT_WEIGHTS = {
  semiLight: 300,
  regular: 400,
  medium: 500,
  bold: 700
};
exports.FONT_WEIGHTS = FONT_WEIGHTS;
var fontTypes = {
  BROAD: 'Volvo Broad, Arial Black, sans-serif',
  NOVUM: 'Volvo Novum, Arial, sans-serif',
  SERIF: 'Volvo Serif, serif'
}; // it automatically picks up 2x pictures if found as a prefix to the actual names

var logoTypes = {
  SQUARE: 'square',
  SPREADMARK: 'spreadmark'
};

function getLogoImages() {
  var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';
  return {
    square: 'volvo-logo.png',
    square2x: 'volvo-logo-2x.png',
    spreadmark: variant === 'dark' ? 'volvo-wordmark.svg' : 'volvo-wordmark-black.svg'
  };
}

function getTokens(color) {
  var variant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'light';
  var sharedTokens = {
    buttonPaddingVertical: 12,
    buttonPaddingHorizontal: 24,
    inputPaddingVertical: 12,
    inputPaddingHorizontal: 16,
    buttonPrimaryOutlineColor: color.primitive.accentBlue,
    buttonSecondaryForeground: color.foreground.inverted,
    buttonDestructiveColor: color.foreground.alert,
    inputForeground: color.foreground.primary,
    inputDisabledBorder: color.primitive.grey300,
    inputBorder: color.ornament.border,
    inputPlaceholder: color.foreground.secondary,
    inputControlBackground: color.primitive.accentBlue,
    inputControlForeground: color.primitive.white,
    card: {
      background: color.background.primary,
      shadow: 'rgba(0, 0, 0, 0.2) 0px 4px 12px'
    }
  };

  if (variant === 'dark') {
    return _objectSpread(_objectSpread({}, sharedTokens), {}, {
      buttonPrimaryColor: color.primitive.accentBlue,
      buttonPrimaryHoverBackground: color.primitive.blue,
      buttonPrimaryForeground: color.primitive.white,
      buttonSecondaryColor: color.foreground.primary,
      buttonSecondaryHoverBackground: color.primitive.grey500,
      buttonSecondaryHoverColor: color.primitive.grey400,
      buttonDestructiveForeground: color.foreground.primary,
      linkForeground: color.foreground.primary,
      linkHoverForeground: color.foreground.secondary,
      inputDisabledForeground: color.primitive.grey400,
      // unused
      inputDisabledControl: color.primitive.grey400,
      inputDisabledBackground: color.primitive.grey200,
      inputBackground: color.background.secondary,
      inputBorderFocus: color.ornament.highlight,
      inputControl: color.foreground.primary,
      inputControlBorder: color.primitive.grey400
    });
  }

  return _objectSpread(_objectSpread({}, sharedTokens), {}, {
    buttonPrimaryColor: color.primitive.blue,
    buttonPrimaryForeground: color.foreground.inverted,
    buttonPrimaryHoverBackground: color.primitive.black,
    buttonSecondaryColor: color.primitive.black,
    buttonSecondaryHoverBackground: color.primitive.blue,
    buttonDestructiveForeground: color.foreground.inverted,
    buttonDestructiveHoverBackground: color.primitive.black,
    linkForeground: color.foreground.action,
    linkHoverForeground: color.foreground.primary,
    inputDisabledForeground: color.primitive.grey300,
    // unused
    inputDisabledControl: color.primitive.grey200,
    // should be decision?
    inputDisabledBackground: color.primitive.grey500,
    inputBackground: color.background.primary,
    inputBorderFocus: color.primitive.accentBlue,
    inputControl: color.primitive.accentBlue,
    inputControlBorder: color.primitive.grey200
  });
}

function getTypeScale(color) {
  return {
    /**
    Headings
    */
    peary: {
      standard: {
        element: 'h1',
        styles: {
          fontFamily: fontTypes.NOVUM,
          fontSize: (0, _sizeToRem.sizeToRem)(6),
          fontWeight: FONT_WEIGHTS.medium,
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(52, 6),
          fromM: {
            fontSize: (0, _sizeToRem.sizeToRem)(6.5),
            lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(56, 6.5)
          },
          fromL: {
            fontSize: (0, _sizeToRem.sizeToRem)(7),
            lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(60, 7)
          }
        }
      }
    },
    cook: {
      standard: {
        element: 'h1',
        styles: {
          fontFamily: fontTypes.NOVUM,
          fontSize: (0, _sizeToRem.sizeToRem)(4),
          fontWeight: FONT_WEIGHTS.medium,
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(36, 4),
          fromM: {
            fontSize: (0, _sizeToRem.sizeToRem)(4.5),
            lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(40, 4.5)
          },
          fromL: {
            fontSize: (0, _sizeToRem.sizeToRem)(5),
            lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(44, 5)
          }
        }
      }
    },
    ootah: {
      standard: {
        element: 'h1',
        styles: {
          fontFamily: fontTypes.NOVUM,
          fontSize: (0, _sizeToRem.sizeToRem)(3),
          fontWeight: FONT_WEIGHTS.semiLight,
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(28, 3),
          fromM: {
            fontSize: (0, _sizeToRem.sizeToRem)(3.5),
            lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(32, 3.5)
          },
          fromL: {
            fontSize: (0, _sizeToRem.sizeToRem)(4),
            lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(36, 4)
          }
        }
      },
      emphasis: {
        styles: {
          fontStyle: 'normal',
          fontWeight: FONT_WEIGHTS.medium
        }
      }
    },

    /**
    Sub-Headings
    */
    hillary: {
      standard: {
        element: 'p',
        styles: {
          fontFamily: fontTypes.NOVUM,
          fontSize: (0, _sizeToRem.sizeToRem)(2.5),
          fontWeight: FONT_WEIGHTS.semiLight,
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(28, 2.5)
        }
      },
      'inline-link': {
        element: 'a',
        styles: {
          color: color.foreground.secondary,
          textDecoration: 'underline',
          '&:hover': {
            color: color.foreground.primary,
            textDecoration: 'none'
          }
        }
      },
      emphasis: {
        element: 'em',
        styles: {
          fontStyle: 'normal',
          fontWeight: FONT_WEIGHTS.medium
        }
      }
    },

    /**
    Body
    */
    columbus: {
      standard: {
        element: 'p',
        styles: {
          fontFamily: fontTypes.NOVUM,
          fontSize: (0, _sizeToRem.sizeToRem)(2),
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(24, 2),
          fontWeight: FONT_WEIGHTS.semiLight
        }
      },
      'inline-link': {
        element: 'a',
        styles: {
          color: color.foreground.secondary,
          textDecoration: 'underline',
          '&:hover': {
            color: color.foreground.primary,
            textDecoration: 'none'
          }
        }
      },
      emphasis: {
        element: 'em',
        styles: {
          fontStyle: 'normal',
          fontWeight: FONT_WEIGHTS.medium
        }
      }
    },

    /**
    Micro
    */
    bates: {
      standard: {
        element: 'small',
        styles: {
          fontFamily: fontTypes.NOVUM,
          fontSize: (0, _sizeToRem.sizeToRem)(1.5),
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(20, 1.5),
          letterSpacing: '0.02em',
          fontWeight: FONT_WEIGHTS.semiLight
        }
      },
      'inline-link': {
        element: 'a',
        styles: {
          color: color.foreground.primary,
          textDecoration: 'underline',
          '&:hover': {
            color: color.foreground.secondary,
            textDecoration: 'none'
          }
        }
      },
      emphasis: {
        element: 'em',
        styles: {
          fontStyle: 'normal',
          fontWeight: FONT_WEIGHTS.medium
        }
      }
    },

    /**
    ActionText
    */
    amundsen: {
      standard: {
        element: 'span',
        styles: {
          fontFamily: fontTypes.NOVUM,
          fontSize: (0, _sizeToRem.sizeToRem)(2),
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(24, 2),
          letterSpacing: '0.04em',
          fontWeight: FONT_WEIGHTS.medium
        }
      }
    },

    /**
    Outliers
    */
    yang: {
      standard: {
        element: 'p',
        styles: {
          fontWeight: FONT_WEIGHTS.regular,
          fontFamily: fontTypes.BROAD,
          fontSize: (0, _sizeToRem.sizeToRem)(5),
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(40, 5),
          letterSpacing: '0.02em',
          fromM: {
            fontSize: (0, _sizeToRem.sizeToRem)(9),
            lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(72, 9)
          }
        }
      }
    },
    kelly: {
      standard: {
        element: 'p',
        styles: {
          fontFamily: fontTypes.NOVUM,
          fontWeight: FONT_WEIGHTS.semiLight,
          fontSize: (0, _sizeToRem.sizeToRem)(1.75),
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(22, 1.75)
        }
      },
      emphasis: {
        element: 'em',
        styles: {
          fontStyle: 'normal',
          fontWeight: FONT_WEIGHTS.medium
        }
      },
      'inline-link': {
        element: 'a',
        styles: {
          color: color.foreground.secondary,
          textDecoration: 'underline',
          '&:hover': {
            color: color.foreground.primary,
            textDecoration: 'none'
          }
        }
      }
    },
    meir: {
      standard: {
        element: 'p',
        styles: {
          fontFamily: fontTypes.NOVUM,
          fontWeight: FONT_WEIGHTS.semiLight,
          fontSize: (0, _sizeToRem.sizeToRem)(1),
          lineHeight: (0, _lineHeightToNumber.lineHeightToNumber)(16, 1)
        }
      }
    }
  };
}

function getTheme() {
  var variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';
  var designTokens = variant === 'light' ? _tokens.default : _tokens2.default;
  var tokens = getTokens(designTokens.color, variant);
  var typeScale = getTypeScale(designTokens.color);
  var logoImages = getLogoImages(variant);
  var name = variant === 'light' ? 'volvo' : 'volvo-dark';
  return _objectSpread({
    name: name,
    // this is the default text direction
    // rtl needs to be set via ThemeProvider explicitly
    direction: 'ltr',
    baselineGrid: 8,
    baselineSubGrid: 4,
    breakpoints: breakpoints,
    colors: _legacyColors.legacyColors,
    tokens: tokens,
    icons: icons,
    fonts: _fonts.fonts,
    fontsPath: 'https://www.volvocars.com/static/shared/fonts/',
    fontTypes: fontTypes,
    logoImages: logoImages,
    logoImagesPath: 'https://www.volvocars.com/static/shared/images/',
    logoTypes: logoTypes,
    typeScale: (0, _buildTypeScale.buildTypeScale)(typeScale)
  }, designTokens);
}
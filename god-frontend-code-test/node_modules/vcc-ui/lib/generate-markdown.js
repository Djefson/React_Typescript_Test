"use strict";

var fs = require('fs');

function renderPackageDoc(path, props) {
  return fs.readFileSync(path, 'utf-8') + props;
}

function generateHeader(name) {
  return "# ".concat(name);
}

function generateDescription(description) {
  return description + '\n';
}

function generatePropType(type) {
  var values;

  if (Array.isArray(type.value)) {
    values = '(' + type.value.map(function (typeValue) {
      return typeValue.name || typeValue.value;
    }) //eslint-disable-next-line
    .join(',') + ')';
  } else {
    values = type.value;
  }

  return '' + type.name + (values ? values : '') + '';
}

function generatePropDefaultValue(value) {
  return '`' + value.value + '`';
}

function generateProp(propName, prop) {
  return "`".concat(propName, "` | ").concat(prop.description && prop.description.replace(/[\r\n]/g, ' '), " | ").concat(prop.type && generatePropType(prop.type), " | ").concat(prop.defaultValue ? generatePropDefaultValue(prop.defaultValue) : 'n/a', "\n");
}

function generateProps(props, name) {
  if (!props) return '\n';
  return "\n### Props - ".concat(name, "\nName | Description   | Type  | Default Value  |\n--- | --- | --- | --- |\n") + Object.keys(props).sort().map(function (propName) {
    return generateProp(propName, props[propName]);
  }).join('');
}

function generateMarkdown(name, reactAPI) {
  var props = generateProps(reactAPI.props, reactAPI.displayName);
  var markdownString = generateHeader(reactAPI.displayName) + '\n' + generateDescription(reactAPI.description) + '\n' + renderPackageDoc(reactAPI.packageDocPath, props);
  return markdownString;
}

module.exports = generateMarkdown;
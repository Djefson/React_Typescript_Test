"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavItem = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactFela = require("react-fela");

var _click = require("../click");

var _arrow = require("../arrow");

var _inline = require("../inline");

var _getThemeStyle2 = require("../../get-theme-style");

var navItemStyle = function navItemStyle(_ref) {
  var _ref2;

  var isActive = _ref.isActive,
      isDropdown = _ref.isDropdown,
      theme = _ref.theme;
  return _ref2 = {
    color: theme.color.foreground.primary,
    fontSize: 20,
    padding: '18px 0',
    minHeight: 20,
    alignItems: 'center',
    textAlign: 'left',
    boxSizing: 'content-box',
    fontWeight: 300,
    fontFamily: theme.fontTypes.NOVUM,
    letterSpacing: 0.3,
    borderBottomWidth: 1,
    borderBottomStyle: 'solid',
    borderBottomColor: theme.color.ornament.divider
  }, (0, _defineProperty2.default)(_ref2, theme.breakpoints.untilL, {
    width: '100%',
    display: 'block',
    extend: {
      condition: isDropdown,
      style: {
        display: 'flex',
        justifyContent: 'space-between'
      }
    }
  }), (0, _defineProperty2.default)(_ref2, theme.breakpoints.fromL, {
    padding: '25px 0',
    fontSize: 16,
    display: 'inline-block',
    borderBottomWidth: 3,
    borderBottomColor: 'transparent',
    marginRight: 20,
    ':last-child': {
      marginRight: 0
    },
    ':focus': {
      outline: 'none',
      extend: {
        condition: !isActive,
        style: {
          borderBottomColor: theme.color.ornament.highlight
        }
      }
    },
    ':focus:not(:focus-visible)': {
      borderBottomColor: 'transparent'
    },
    ':hover': {
      borderBottomColor: theme.color.ornament.highlight
    },
    extend: {
      condition: isActive,
      style: {
        borderBottomColor: theme.color.ornament.highlight
      }
    }
  }), _ref2;
};

var NavItem = /*#__PURE__*/_react.default.forwardRef(function (_ref3, ref) {
  var _ref4, _ref5;

  var children = _ref3.children,
      _ref3$isDropdown = _ref3.isDropdown,
      isDropdown = _ref3$isDropdown === void 0 ? false : _ref3$isDropdown,
      _ref3$isActive = _ref3.isActive,
      isActive = _ref3$isActive === void 0 ? false : _ref3$isActive,
      props = (0, _objectWithoutProperties2.default)(_ref3, ["children", "isDropdown", "isActive"]);

  var _useFela = (0, _reactFela.useFela)(),
      theme = _useFela.theme;

  var styleProps = {
    isActive: isActive,
    isDropdown: isDropdown,
    theme: theme
  };

  var _getThemeStyle = (0, _getThemeStyle2.getThemeStyle)('navItemArrow', theme),
      _getThemeStyle$size = _getThemeStyle.size,
      size = _getThemeStyle$size === void 0 ? 14 : _getThemeStyle$size,
      _getThemeStyle$color = _getThemeStyle.color,
      color = _getThemeStyle$color === void 0 ? theme.tokens.inputControl : _getThemeStyle$color;

  return /*#__PURE__*/_react.default.createElement(_click.Click, (0, _extends2.default)({
    ref: ref
  }, props, {
    extend: [navItemStyle(styleProps), (0, _getThemeStyle2.getThemeStyle)('navItem', theme, styleProps)]
  }), children, isDropdown && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_inline.Inline, {
    extend: (_ref4 = {}, (0, _defineProperty2.default)(_ref4, theme.breakpoints.untilL, {
      display: 'none'
    }), (0, _defineProperty2.default)(_ref4, "marginLeft", 8), (0, _defineProperty2.default)(_ref4, "verticalAlign", 'middle'), _ref4)
  }, /*#__PURE__*/_react.default.createElement(_arrow.Arrow, {
    direction: isActive ? 'up' : 'down',
    size: size,
    color: color
  })), /*#__PURE__*/_react.default.createElement(_inline.Inline, {
    extend: (_ref5 = {}, (0, _defineProperty2.default)(_ref5, theme.breakpoints.fromL, {
      display: 'none'
    }), (0, _defineProperty2.default)(_ref5, "marginLeft", 8), (0, _defineProperty2.default)(_ref5, "verticalAlign", 'middle'), _ref5)
  }, /*#__PURE__*/_react.default.createElement(_arrow.Arrow, {
    direction: 'right',
    size: size,
    color: color
  }))));
});

exports.NavItem = NavItem;
NavItem.displayName = 'NavItem';
NavItem.propTypes = {
  children: _propTypes.default.node,

  /** Indicate if the NavItem will open a dropdown menu */
  isDropdown: _propTypes.default.bool,

  /** Indicate if the NavItem is in an active state */
  isActive: _propTypes.default.bool
};
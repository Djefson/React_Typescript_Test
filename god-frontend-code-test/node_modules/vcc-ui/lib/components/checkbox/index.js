"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Checkbox = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _reactFela = require("react-fela");

var _block = require("../block");

var _view = require("../view");

var _message = require("../message");

var _getThemeStyle = require("../../get-theme-style");

var _autoId = require("../../auto-id");

var _deprecate = require("../../deprecate");

var checkmarkIcon = function checkmarkIcon(color) {
  return "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='10' viewBox='0 0 12 10' fill='none' %3E %3Cpath stroke='".concat(encodeURIComponent(color), "' d='M1 6L4 9L11 1' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round' %3E %3C/path%3E %3C/svg%3E\")");
};

var checkboxStyle = function checkboxStyle(_ref) {
  var theme = _ref.theme,
      isValid = _ref.isValid;
  return {
    boxSizing: 'border-box',
    borderWidth: 1,
    borderStyle: 'solid',
    borderRadius: 4,
    appearance: 'none',
    width: 20,
    height: 20,
    margin: 0,
    padding: 0,
    flexShrink: 0,
    flexGrow: 0,
    outline: 0,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
    cursor: 'pointer',
    borderColor: theme.tokens.inputControlBorder,
    backgroundColor: theme.tokens.inputBackground,
    extend: [{
      condition: !isValid,
      style: {
        borderColor: theme.color.foreground.alert,
        borderWidth: 2
      }
    }, {
      condition: isValid,
      style: {
        ':focus': {
          borderColor: theme.tokens.inputBorderFocus
        }
      }
    }, {
      condition: isValid,
      style: {
        ':active': {
          color: 'pink'
        }
      }
    }],
    ':checked': {
      backgroundColor: theme.tokens.inputControlBackground,
      borderColor: theme.tokens.inputControlBackground,
      backgroundImage: checkmarkIcon(theme.tokens.inputControlForeground),
      backgroundSize: '12px 10px',
      backgroundPosition: 'center',
      backgroundRepeat: 'no-repeat'
    },
    ':disabled': {
      cursor: 'not-allowed',
      borderColor: theme.tokens.inputDisabledBorder,
      backgroundColor: theme.tokens.inputDisabledBackground,
      ':checked': {
        borderColor: theme.tokens.inputDisabledBorder,
        backgroundColor: theme.tokens.inputDisabledBackground,
        backgroundImage: checkmarkIcon(theme.tokens.inputDisabledControl)
      }
    }
  };
};

var labelStyle = function labelStyle(_ref2) {
  var theme = _ref2.theme,
      isValid = _ref2.isValid;
  return {
    color: isValid ? theme.color.foreground.secondary : theme.color.foreground.alert,
    fontSize: 16,
    letterSpacing: '0.02em',
    fontFamily: theme.fontTypes.NOVUM,
    fontWeight: 300
  };
};

var Checkbox = /*#__PURE__*/_react.default.forwardRef(function (_ref3, ref) {
  var _ref3$isValid = _ref3.isValid,
      isValid = _ref3$isValid === void 0 ? true : _ref3$isValid,
      _ref3$label = _ref3.label,
      label = _ref3$label === void 0 ? '' : _ref3$label,
      errorMessage = _ref3.errorMessage,
      description = _ref3.description,
      props = (0, _objectWithoutProperties2.default)(_ref3, ["isValid", "label", "errorMessage", "description"]);

  var _useFela = (0, _reactFela.useFela)(),
      theme = _useFela.theme;

  var styleProps = {
    isValid: isValid,
    theme: theme
  };
  var id = (0, _autoId.useId)('vcc-ui-checkbox', props.id); // legacy check

  var hasLabel = label && (typeof label === 'string' ? label.length > 0 : true);
  (0, _deprecate.deprecate)('Unlabelled text-input fields are deprecated and will be removed in 3.0.0. Pass a label prop.', !hasLabel);

  var messages = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !errorMessage ? null : /*#__PURE__*/_react.default.createElement(_message.Message, {
    type: "error"
  }, errorMessage), !description ? null : /*#__PURE__*/_react.default.createElement(_message.Message, null, description));

  return /*#__PURE__*/_react.default.createElement(_view.View, {
    spacing: 0.5,
    shrink: 1
  }, /*#__PURE__*/_react.default.createElement(_view.View, {
    spacing: 1,
    direction: "row"
  }, /*#__PURE__*/_react.default.createElement(_block.Block, (0, _extends2.default)({}, props, {
    ref: ref,
    id: id,
    as: "input",
    type: "checkbox",
    extend: [checkboxStyle(styleProps), (0, _getThemeStyle.getThemeStyle)('checkbox', theme, styleProps)]
  })), !hasLabel ? null : /*#__PURE__*/_react.default.createElement(_block.Block, {
    as: "label",
    htmlFor: id,
    style: labelStyle(styleProps)
  }, label)), messages);
});

exports.Checkbox = Checkbox;
Checkbox.displayName = 'Checkbox';
Checkbox.propTypes = {
  onChange: _propTypes.func.isRequired,
  checked: _propTypes.bool,
  isValid: _propTypes.bool,
  id: _propTypes.string,
  name: _propTypes.string,

  /** Renders a label inside the input.  */
  label: (0, _propTypes.oneOfType)([_propTypes.string, _propTypes.node]),

  /** Renders a description text underneath the input.  */
  description: _propTypes.string,

  /** Renders a red error message for validation underneath the input.  */
  errorMessage: _propTypes.string
};
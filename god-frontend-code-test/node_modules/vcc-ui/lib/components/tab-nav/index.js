"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabNav = exports.TabNavContext = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _block = require("../block");

var _click = require("../click");

var _arrow = require("../arrow");

var _inline = require("../inline");

var _flex = require("../flex");

var _getThemeStyle = require("../../get-theme-style");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var TabNavContext = /*#__PURE__*/(0, _react.createContext)({});
exports.TabNavContext = TabNavContext;
var styles = {
  nav: function nav(_ref) {
    var theme = _ref.theme,
        reverseOut = _ref.reverseOut;
    return {
      flexDirection: 'row',
      overflow: 'hidden',
      borderBottomStyle: 'solid',
      borderBottomWidth: 1,
      borderBottomColor: reverseOut ? theme.color.primitive.grey100 : theme.color.ornament.divider,
      backgroundColor: reverseOut ? theme.color.primitive.grey100 : theme.color.background.secondary
    };
  },
  scrollContainer: {
    flex: '0 1 auto',
    overflowY: 'hidden',
    overflowX: 'auto',
    msOverflowY: 'hidden',
    msOverflowX: 'auto',
    msOverflowStyle: 'none',
    '::-webkit-scrollbar': {
      display: 'none'
    }
  },
  itemContainer: {
    flexDirection: 'row',
    padding: '0 0 0 19px'
  },
  stickyLeft: function stickyLeft(_ref2) {
    var isCentered = _ref2.isCentered;
    return {
      flexShrink: 0,
      flexBasis: 0,
      flexGrow: isCentered ? 1 : 0,
      msFlex: '1 0 auto',
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center'
    };
  },
  stickyRight: {
    flexShrink: 0,
    flexBasis: 0,
    flexGrow: 1,
    msFlex: '1 0 auto',
    alignItems: 'center',
    justifyContent: 'flex-end',
    flexDirection: 'row'
  },
  border: function border(_ref3) {
    var reverseOut = _ref3.reverseOut,
        animatedMargin = _ref3.animatedMargin,
        duration = _ref3.duration,
        theme = _ref3.theme;
    return {
      width: 0,
      height: duration === 0 ? 0 : 3,
      marginRight: '0 !important',
      backgroundColor: reverseOut ? theme.color.primitive.white : theme.color.ornament.highlight,
      transitionProperty: "margin-".concat(animatedMargin, ", width"),
      transitionTimingFunction: 'ease-out',
      transitionDuration: duration + 'ms'
    };
  },
  backButton: function backButton(_ref4) {
    var _ref5;

    var reverseOut = _ref4.reverseOut,
        _ref4$showBackButtonO = _ref4.showBackButtonOn,
        showBackButtonOn = _ref4$showBackButtonO === void 0 ? [] : _ref4$showBackButtonO,
        theme = _ref4.theme;
    return _ref5 = {
      fontSize: 15,
      padding: '16px 10px 19px',
      verticalAlign: 'middle',
      fontWeight: 300,
      fontFamily: theme.fontTypes.NOVUM,
      whiteSpace: 'nowrap',
      flexShrink: '0',
      color: reverseOut ? theme.color.primitive.white : theme.color.foreground.primary,
      display: showBackButtonOn.some(function (size) {
        return size === 's';
      }) ? 'inline' : 'none',
      '> svg': {
        marginRight: 8
      },
      ':hover > svg': {
        transform: 'translateX(-5px)'
      }
    }, (0, _defineProperty2.default)(_ref5, theme.breakpoints.onlyM, {
      display: showBackButtonOn.some(function (size) {
        return size === 'm';
      }) ? 'inline' : 'none'
    }), (0, _defineProperty2.default)(_ref5, theme.breakpoints.fromL, {
      display: showBackButtonOn.some(function (size) {
        return size === 'l';
      }) ? 'inline' : 'none'
    }), _ref5;
  },
  backButtonText: function backButtonText(_ref6) {
    var theme = _ref6.theme;
    return (0, _defineProperty2.default)({}, theme.breakpoints.onlyS, {
      display: 'none'
    });
  }
};

function BackButton(_ref8) {
  var _ref8$backButtonConfi = _ref8.backButtonConfig,
      backButtonConfig = _ref8$backButtonConfi === void 0 ? {} : _ref8$backButtonConfi,
      showBackButtonOn = _ref8.showBackButtonOn,
      reverseOut = _ref8.reverseOut;

  var _useFela = (0, _reactFela.useFela)(),
      theme = _useFela.theme;

  var href = backButtonConfig.href,
      _backButtonConfig$cli = backButtonConfig.clickHandler,
      clickHandler = _backButtonConfig$cli === void 0 ? function () {} : _backButtonConfig$cli,
      text = backButtonConfig.text;
  var styleProps = {
    theme: theme,
    reverseOut: reverseOut,
    showBackButtonOn: showBackButtonOn
  };
  return /*#__PURE__*/_react.default.createElement(_click.Click, {
    onClick: clickHandler,
    href: href,
    extend: [styles.backButton(styleProps), (0, _getThemeStyle.getThemeStyle)('tabNavBackButton', theme, styleProps)]
  }, /*#__PURE__*/_react.default.createElement(_arrow.Arrow, {
    direction: "left",
    size: 10,
    color: reverseOut ? theme.color.primitive.white : theme.color.ornament.highlight
  }), /*#__PURE__*/_react.default.createElement(_inline.Inline, {
    extend: styles.backButtonText
  }, text || ''));
}

function TabNavBorder() {
  var _React$useContext = _react.default.useContext(TabNavContext),
      borderRef = _React$useContext.borderRef,
      reverseOut = _React$useContext.reverseOut,
      duration = _React$useContext.duration;

  var _useFela2 = (0, _reactFela.useFela)(),
      theme = _useFela2.theme;

  var animatedMargin = theme.direction === 'rtl' ? 'right' : 'left';
  return /*#__PURE__*/_react.default.createElement(_block.Block, {
    ref: borderRef,
    extend: styles.border({
      animatedMargin: animatedMargin,
      duration: duration,
      reverseOut: reverseOut,
      theme: theme
    })
  });
}

var TabNav = /*#__PURE__*/_react.default.forwardRef(function (_ref9, ref) {
  var children = _ref9.children,
      _ref9$duration = _ref9.duration,
      duration = _ref9$duration === void 0 ? 160 : _ref9$duration,
      _ref9$enableLineTrans = _ref9.enableLineTransition,
      enableLineTransition = _ref9$enableLineTrans === void 0 ? false : _ref9$enableLineTrans,
      _ref9$textAlign = _ref9.textAlign,
      textAlign = _ref9$textAlign === void 0 ? 'center' : _ref9$textAlign,
      _ref9$stickyChildrenL = _ref9.stickyChildrenLeft,
      stickyChildrenLeft = _ref9$stickyChildrenL === void 0 ? null : _ref9$stickyChildrenL,
      _ref9$stickyChildrenR = _ref9.stickyChildrenRight,
      stickyChildrenRight = _ref9$stickyChildrenR === void 0 ? null : _ref9$stickyChildrenR,
      _ref9$showBackButtonO = _ref9.showBackButtonOn,
      showBackButtonOn = _ref9$showBackButtonO === void 0 ? ['s', 'm', 'l'] : _ref9$showBackButtonO,
      _ref9$backButton = _ref9.backButton,
      backButtonConfig = _ref9$backButton === void 0 ? {} : _ref9$backButton;

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      active = _useState2[0],
      setActive = _useState2[1];

  var scrollRef = (0, _react.useRef)();
  var borderRef = (0, _react.useRef)();

  var _useFela3 = (0, _reactFela.useFela)(),
      theme = _useFela3.theme;

  var isCentered = textAlign === 'center';
  var backButtonVisible = !!(backButtonConfig.clickHandler || backButtonConfig.href);
  var styleProps = {
    theme: theme,
    isCentered: isCentered
  };
  var context = {
    active: active,
    setActive: setActive,
    scrollRef: scrollRef,
    borderRef: borderRef,
    duration: enableLineTransition ? duration : 0
  };
  return /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    as: "nav",
    ref: ref,
    extend: [styles.nav(styleProps), (0, _getThemeStyle.getThemeStyle)('tabNav', theme, styleProps)]
  }, /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    extend: styles.stickyLeft(styleProps)
  }, backButtonVisible ? /*#__PURE__*/_react.default.createElement(BackButton, {
    backButtonConfig: backButtonConfig,
    showBackButtonOn: showBackButtonOn
  }) : null, stickyChildrenLeft), /*#__PURE__*/_react.default.createElement(TabNavContext.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    ref: scrollRef,
    extend: styles.scrollContainer
  }, /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    extend: styles.itemContainer
  }, /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    extend: {
      paddingRight: 1
    }
  }), children, /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    extend: {
      paddingRight: 1
    }
  })), /*#__PURE__*/_react.default.createElement(TabNavBorder, null))), /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    extend: styles.stickyRight
  }, stickyChildrenRight));
});

exports.TabNav = TabNav;
TabNav.displayName = 'TabNav';
TabNav.propTypes = {
  /** Text-align: left or center */
  textAlign: _propTypes.default.oneOf(['center', 'left']),

  /** Back button text, href, click handler */
  backButton: _propTypes.default.shape({
    text: _propTypes.default.string,
    href: _propTypes.default.string,
    clickHandler: _propTypes.default.func
  }),

  /** A JSX node */
  children: _propTypes.default.node,

  /** A JSX node sticky to the left */
  stickyChildrenLeft: _propTypes.default.node,

  /** A JSX node sticky to the right */
  stickyChildrenRight: _propTypes.default.node,

  /** Which viewports to show the back button on */
  showBackButtonOn: _propTypes.default.arrayOf(_propTypes.default.oneOf(['s', 'm', 'l'])),

  /** Enable fancy transition when changing active tabs */
  enableLineTransition: _propTypes.default.bool,

  /** Set duration of lineTransition animation */
  duration: _propTypes.default.number
};
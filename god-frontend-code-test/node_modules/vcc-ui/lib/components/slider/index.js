"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactFela = require("react-fela");

var _arrow = require("../arrow");

var _block = require("../block");

var _click = require("../click");

var _getThemeStyle = require("../../get-theme-style");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var KEY_LEFT = 37;
var KEY_UP = 38;
var KEY_RIGHT = 39;
var KEY_DOWN = 40;
var THUMB_WIDTH = 40;
var THUMB_HEIGHT = 40;

var thumbStyle = function thumbStyle(_ref) {
  var left = _ref.left,
      isDragging = _ref.isDragging,
      theme = _ref.theme,
      disabled = _ref.disabled;
  return {
    position: 'absolute',
    top: 0,
    left: left,
    width: THUMB_WIDTH,
    height: THUMB_HEIGHT,
    border: '1px solid ' + theme.tokens.inputBorder,
    background: theme.tokens.inputBackground,
    cursor: disabled ? 'not-allowed' : 'ew-resize',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    outline: 0,
    ':focus': {
      borderColor: theme.tokens.inputBorderFocus
    },
    extend: {
      condition: !isDragging,
      style: {
        transition: 'left 200ms ease-out'
      }
    }
  };
};

var SliderComponent = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(SliderComponent, _Component);

  var _super = _createSuper(SliderComponent);

  function SliderComponent(props) {
    var _this;

    (0, _classCallCheck2.default)(this, SliderComponent);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      isDragging: false,
      lastStep: 0,
      currentLeft: 0
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidUpdate", function (prevProps) {
      var initialValue = _this.props.initialValue;
      var prevInitialValue = prevProps.initialValue;

      if (initialValue !== prevInitialValue) {
        _this.setState(function () {
          return {
            currentStep: _this.getStepForValue(initialValue)
          };
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function () {
      var _this$props$onChange = _this.props.onChange,
          onChange = _this$props$onChange === void 0 ? function () {} : _this$props$onChange;
      var _this$state = _this.state,
          lastStep = _this$state.lastStep,
          currentStep = _this$state.currentStep;

      var currentValue = _this.getCurrentValue();

      if (lastStep !== currentStep && typeof onChange === 'function') {
        onChange(currentValue);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getElementProperty", function (element, property) {
      return element && element.getBoundingClientRect ? element.getBoundingClientRect()[property] : 0;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getElementWidth", function (element) {
      return _this.getElementProperty(element, 'width');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getElementLeft", function (element) {
      return _this.getElementProperty(element, 'left');
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getNumberOfSteps", function () {
      var _this$props = _this.props,
          step = _this$props.step,
          minValue = _this$props.minValue,
          maxValue = _this$props.maxValue,
          _this$props$valueList = _this$props.valueList,
          valueList = _this$props$valueList === void 0 ? [] : _this$props$valueList;

      if (valueList.length > 0) {
        return valueList.length;
      } else {
        return (maxValue - minValue) / step + 1;
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getStepAtPercentagePosition", function (percentagePosition) {
      var steps = _this.getNumberOfSteps();

      return Math.round(percentagePosition * (steps - 1));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getStepForValue", function (value) {
      var _this$props2 = _this.props,
          minValue = _this$props2.minValue,
          maxValue = _this$props2.maxValue,
          _this$props2$valueLis = _this$props2.valueList,
          valueList = _this$props2$valueLis === void 0 ? [] : _this$props2$valueLis;

      var steps = _this.getNumberOfSteps();

      var thisValue = value - minValue;
      var range = maxValue - minValue;

      if (valueList.length > 0) {
        return valueList.indexOf(value);
      } else {
        return Math.round((steps - 1) * thisValue / range);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getValueAtStepPosition", function (step) {
      var _this$props3 = _this.props,
          minValue = _this$props3.minValue,
          maxValue = _this$props3.maxValue,
          _this$props3$valueLis = _this$props3.valueList,
          valueList = _this$props3$valueLis === void 0 ? [] : _this$props3$valueLis;

      var steps = _this.getNumberOfSteps();

      if (valueList.length > 0) {
        return valueList.find(function (value, index) {
          return index === step;
        });
      } else {
        return minValue + step * ((maxValue - minValue) / (steps - 1));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getCurrentValue", function () {
      var currentStep = _this.state.currentStep;
      return _this.getValueAtStepPosition(currentStep);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateCurrentStep", function (position) {
      var trackWidth = _this.getElementWidth(_this.trackRef.current);

      var trackLeft = _this.getElementLeft(_this.trackRef.current);

      var thumbWidth = THUMB_WIDTH; // we invert the leftOffset value on rtl layout

      var leftOffset = position - trackLeft - thumbWidth / 2;
      var newPositionLeft = _this.props.theme.direction === 'ltr' ? leftOffset : trackWidth - leftOffset;
      var isMax = newPositionLeft >= trackWidth - thumbWidth;
      var isMin = newPositionLeft <= 0;
      var currentPositionLeft = isMax ? trackWidth - thumbWidth : isMin ? 0 : newPositionLeft;
      var currentPositionPercent = currentPositionLeft / (trackWidth - thumbWidth);

      if (typeof position === 'number') {
        _this.setState({
          currentStep: _this.getStepAtPercentagePosition(currentPositionPercent),
          currentLeft: currentPositionLeft
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getLeftPositionFromCurrentStep", function () {
      if (!_this.trackRef || !_this.thumbRef) {
        return 0;
      }

      var _this$state2 = _this.state,
          _this$state2$currentS = _this$state2.currentStep,
          currentStep = _this$state2$currentS === void 0 ? 0 : _this$state2$currentS,
          _this$state2$currentL = _this$state2.currentLeft,
          currentLeft = _this$state2$currentL === void 0 ? 0 : _this$state2$currentL;

      var steps = _this.getNumberOfSteps();

      var trackWidth = _this.getElementWidth(_this.trackRef.current);

      var leftPos = currentStep * (trackWidth - THUMB_WIDTH) / (steps - 1);
      return currentLeft ? currentLeft : Math.round(leftPos);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseDown", function (e) {
      _this.updateCurrentStep(e.clientX);

      _this.setState({
        lastStep: _this.state.currentStep
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDragStart", function () {
      _this.setState({
        isDragging: true,
        lastStep: _this.state.currentStep
      });

      document.addEventListener('mousemove', _this.handleDrag);
      document.addEventListener('mouseup', _this.handleDragEnd);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDrag", function (e) {
      var onMoveStart = _this.props.onMoveStart;

      var currentValue = _this.getCurrentValue();

      e.preventDefault();
      e.stopPropagation();

      if (_this.state.isDragging) {
        _this.updateCurrentStep(e.touches ? e.touches[0].clientX : e.clientX);

        if (typeof onMoveStart === 'function') {
          onMoveStart(currentValue);
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDragEnd", function () {
      var onMoveEnd = _this.props.onMoveEnd;

      _this.setState({
        isDragging: false
      });

      document.removeEventListener('mousemove', _this.handleDrag);
      document.removeEventListener('mouseup', _this.handleDragEnd);

      _this.thumbRef.current.blur();

      _this.resetCurrentLeft();

      _this.handleChange();

      if (typeof onMoveEnd === 'function') {
        onMoveEnd();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "adjustCurrentStepBy", function (diff) {
      var currentStep = _this.state.currentStep;

      var steps = _this.getNumberOfSteps();

      var nextStep = currentStep + diff;

      _this.setState({
        currentStep: nextStep <= steps - 1 && nextStep >= 0 ? nextStep : currentStep
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyDown", function (e) {
      e.preventDefault();
      e.stopPropagation();
      var key = e.which;

      if (key === KEY_UP || key === KEY_RIGHT) {
        _this.adjustCurrentStepBy(1);
      } else if (key === KEY_DOWN || key === KEY_LEFT) {
        _this.adjustCurrentStepBy(-1);
      }
    });
    _this.trackRef = /*#__PURE__*/_react.default.createRef();
    _this.thumbRef = /*#__PURE__*/_react.default.createRef();
    return _this;
  }

  (0, _createClass2.default)(SliderComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var initialValue = this.props.initialValue;
      this.setState({
        currentStep: this.getStepForValue(initialValue)
      });
      var resizeTimer;

      this.resizeEventHandler = function () {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(function () {
          _this2.forceUpdate();
        }, 1);
      };

      window.addEventListener('resize', this.resizeEventHandler);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.resizeEventHandler);
    }
  }, {
    key: "resetCurrentLeft",
    value: function resetCurrentLeft() {
      this.setState({
        currentLeft: 0
      });
    }
  }, {
    key: "handleMouseUp",
    value: function handleMouseUp() {
      this.resetCurrentLeft();
      this.handleChange();
    }
  }, {
    key: "handleKeyUp",
    value: function handleKeyUp() {
      this.setState({
        lastStep: this.state.currentStep
      });
      this.handleChange();
    }
  }, {
    key: "renderThumb",
    value: function renderThumb() {
      var _this3 = this;

      var _this$props4 = this.props,
          minValue = _this$props4.minValue,
          maxValue = _this$props4.maxValue,
          theme = _this$props4.theme,
          disabled = _this$props4.disabled;
      var value = this.getCurrentValue();
      var left = this.getLeftPositionFromCurrentStep();
      var styleProps = {
        isDragging: this.state.isDragging,
        left: left,
        theme: theme,
        disabled: disabled
      };
      return /*#__PURE__*/_react.default.createElement(_click.Click, {
        ref: this.thumbRef,
        extend: [thumbStyle(styleProps), (0, _getThemeStyle.getThemeStyle)('sliderThumb', theme, styleProps)],
        role: "slider",
        "aria-valuemin": minValue,
        "aria-valuemax": maxValue,
        "aria-valuenow": value,
        "aria-orientation": "horizontal",
        disabled: disabled,
        onMouseDown: function onMouseDown() {
          return _this3.handleDragStart();
        },
        onMouseMove: function onMouseMove(e) {
          return _this3.handleDrag(e);
        },
        onMouseUp: function onMouseUp() {
          return _this3.handleDragEnd();
        },
        onContextMenu: function onContextMenu() {
          return _this3.handleDragEnd();
        },
        onTouchStart: function onTouchStart() {
          return _this3.handleDragStart();
        },
        onTouchMove: function onTouchMove(e) {
          return _this3.handleDrag(e);
        },
        onTouchEnd: function onTouchEnd() {
          return _this3.handleDragEnd();
        },
        onKeyDown: function onKeyDown(e) {
          return _this3.handleKeyDown(e);
        },
        onKeyUp: function onKeyUp() {
          return _this3.handleKeyUp();
        }
      }, /*#__PURE__*/_react.default.createElement(_arrow.Arrow, {
        color: theme.tokens[disabled ? 'inputDisabledControl' : 'inputControl'],
        direction: "left"
      }), /*#__PURE__*/_react.default.createElement(_arrow.Arrow, {
        color: theme.tokens[disabled ? 'inputDisabledControl' : 'inputControl'],
        direction: "right"
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var theme = this.props.theme;
      return /*#__PURE__*/_react.default.createElement(_block.Block, {
        extend: [{
          position: 'relative',
          height: 42
        }, (0, _getThemeStyle.getThemeStyle)('slider', theme)]
      }, /*#__PURE__*/_react.default.createElement(_block.Block, {
        extend: [{
          position: 'absolute',
          top: 9,
          left: 0,
          right: 0,
          width: '100%',
          boxSizing: 'border-box',
          height: 21,
          borderWidth: 1,
          borderStyle: 'solid',
          borderColor: theme.tokens.inputBorder,
          background: theme.tokens.inputBackground,
          cursor: this.props.disabled ? 'not-allwoed' : 'pointer'
        }, (0, _getThemeStyle.getThemeStyle)('sliderTrack', theme)],
        ref: this.trackRef,
        onMouseDown: function onMouseDown(e) {
          if (!_this4.props.disabled) {
            _this4.handleMouseDown(e);
          }
        },
        onMouseUp: function onMouseUp() {
          if (!_this4.props.disabled) {
            _this4.handleMouseUp();
          }
        }
      }), typeof this.state.currentStep !== 'undefined' && this.renderThumb());
    }
  }]);
  return SliderComponent;
}(_react.Component);

(0, _defineProperty2.default)(SliderComponent, "propTypes", {
  initialValue: _propTypes.default.number.isRequired,
  minValue: _propTypes.default.number,
  maxValue: _propTypes.default.number,
  step: _propTypes.default.number,
  valueList: _propTypes.default.array,
  onMoveStart: _propTypes.default.func,
  onMoveEnd: _propTypes.default.func,
  onChange: _propTypes.default.func,
  theme: _propTypes.default.object,
  disabled: _propTypes.default.bool
});
SliderComponent.displayName = 'Slider';
var Slider = (0, _reactFela.withTheme)(SliderComponent);
exports.Slider = Slider;
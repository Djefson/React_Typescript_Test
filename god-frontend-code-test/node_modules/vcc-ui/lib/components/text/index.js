"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = exports.SUB_STYLES = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("./utils");

var _propTypes2 = require("../../prop-types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SUB_STYLES = ['standard', 'inline-link', 'emphasis'];
exports.SUB_STYLES = SUB_STYLES;

var TextContext = /*#__PURE__*/_react.default.createContext({
  isRootElement: true
});

var defaultVariant = 'columbus';
var defaultSubStyle = 'standard';

var Text = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var extend = _ref.extend,
      variant = _ref.variant,
      subStyle = _ref.subStyle,
      fg = _ref.fg,
      _ref$foreground = _ref.foreground,
      foreground = _ref$foreground === void 0 ? fg : _ref$foreground,
      as = _ref.as,
      className = _ref.className,
      children = _ref.children,
      props = (0, _objectWithoutProperties2.default)(_ref, ["extend", "variant", "subStyle", "fg", "foreground", "as", "className", "children"]);

  var _useFela = (0, _reactFela.useFela)(props),
      css = _useFela.css,
      theme = _useFela.theme;

  var _useContext = (0, _react.useContext)(TextContext),
      isRootElement = _useContext.isRootElement,
      parentVariant = _useContext.parentVariant,
      parentSubStyle = _useContext.parentSubStyle;

  var appliedVariant = variant || parentVariant || defaultVariant;
  var appliedSubStyle = subStyle || parentSubStyle || defaultSubStyle;
  var variants = (0, _utils.normalizeResponsiveValue)(appliedVariant);
  var subStyles = (0, _utils.normalizeResponsiveValue)(appliedSubStyle);
  var displayModifier = isRootElement ? {
    display: 'block'
  } : {};
  var Element = (0, _utils.getRenderedElement)(isRootElement, as, appliedVariant, appliedSubStyle, theme);
  return /*#__PURE__*/_react.default.createElement(Element, (0, _extends2.default)({
    ref: ref
  }, props, {
    className: css(displayModifier, _objectSpread(_objectSpread({
      color: foreground || theme.color.foreground.primary,
      margin: 0
    }, (0, _utils.mergeStyles)(theme.typeScale[variants[0]], subStyles[0])), {}, {
      fromM: (0, _utils.mergeStyles)(theme.typeScale[variants[1]], subStyles[1], 'fromM'),
      fromL: (0, _utils.mergeStyles)(theme.typeScale[variants[2]], subStyles[2], 'fromL'),
      fromXL: (0, _utils.mergeStyles)(theme.typeScale[variants[3]], subStyles[3], 'fromXL')
    }), extend) + (className ? ' ' + className : '')
  }), /*#__PURE__*/_react.default.createElement(TextContext.Provider, {
    value: {
      isRootElement: false,
      parentVariant: appliedVariant,
      parentSubStyle: appliedSubStyle
    }
  }, children));
});

exports.Text = Text;
Text.displayName = 'Text';
Text.propTypes = {
  /** A JSX node */
  children: _propTypes.default.node,

  /** A custom font color */
  fg: _propTypes2.responsiveStringProp,

  /** A custom font color */
  foreground: _propTypes2.responsiveStringProp,

  /** Any valid React element, function, or a string specifying a name for an HTML element */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element, _propTypes.default.elementType, _propTypes.default.func]),

  /** One of the available type scale styles */
  variant: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.string]),

  /** One of the available sub-styles for a given type scale */
  subStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.string]),

  /** An object containing valid CSS style declarations */
  extend: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func, _propTypes.default.array]),

  /** Add an additional custom className to element. Warning: make sure it doesn't collide with the classNames being generated for the atomic CSS */
  className: _propTypes.default.string
};
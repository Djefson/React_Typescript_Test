"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.View = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _spacer = require("../spacer");

var _applySpaceMultiplier = require("../../apply-space-multiplier");

var _propTypes2 = require("../../prop-types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var View = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
      As = _ref.as,
      extend = _ref.extend,
      inlineStyle = _ref.style,
      space = _ref.spacing,
      className = _ref.className,
      bg = _ref.bg,
      _ref$backgroundColor = _ref.backgroundColor,
      backgroundColor = _ref$backgroundColor === void 0 ? bg : _ref$backgroundColor,
      padding = _ref.padding,
      paddingLeft = _ref.paddingLeft,
      paddingRight = _ref.paddingRight,
      paddingBottom = _ref.paddingBottom,
      paddingTop = _ref.paddingTop,
      margin = _ref.margin,
      marginLeft = _ref.marginLeft,
      marginRight = _ref.marginRight,
      marginBottom = _ref.marginBottom,
      marginTop = _ref.marginTop,
      height = _ref.height,
      width = _ref.width,
      grow = _ref.grow,
      shrink = _ref.shrink,
      minWidth = _ref.minWidth,
      maxWidth = _ref.maxWidth,
      minHeight = _ref.minHeight,
      maxHeight = _ref.maxHeight,
      order = _ref.order,
      alignContent = _ref.alignContent,
      justifyContent = _ref.justifyContent,
      alignItems = _ref.alignItems,
      alignSelf = _ref.alignSelf,
      flex = _ref.flex,
      basis = _ref.basis,
      direction = _ref.direction,
      display = _ref.display,
      wrap = _ref.wrap,
      props = (0, _objectWithoutProperties2.default)(_ref, ["children", "as", "extend", "style", "spacing", "className", "bg", "backgroundColor", "padding", "paddingLeft", "paddingRight", "paddingBottom", "paddingTop", "margin", "marginLeft", "marginRight", "marginBottom", "marginTop", "height", "width", "grow", "shrink", "minWidth", "maxWidth", "minHeight", "maxHeight", "order", "alignContent", "justifyContent", "alignItems", "alignSelf", "flex", "basis", "direction", "display", "wrap"]);

  var _useFela = (0, _reactFela.useFela)(props),
      css = _useFela.css,
      theme = _useFela.theme;

  var spacing = (0, _applySpaceMultiplier.applySpaceMultiplier)(theme.baselineGrid);
  return /*#__PURE__*/_react.default.createElement(As, (0, _extends2.default)({}, props, {
    style: inlineStyle,
    ref: ref,
    className: css({
      boxSizing: 'border-box',
      flexDirection: direction,
      flexWrap: wrap,
      flexGrow: grow,
      flexShrink: shrink,
      flexBasis: basis,
      flex: flex,
      justifyContent: justifyContent,
      alignContent: alignContent,
      alignItems: alignItems,
      alignSelf: alignSelf,
      order: order,
      display: display,
      maxWidth: maxWidth,
      minWidth: minWidth,
      width: width,
      maxHeight: maxHeight,
      minHeight: minHeight,
      height: height,
      padding: spacing(padding),
      paddingLeft: spacing(paddingLeft),
      paddingRight: spacing(paddingRight),
      paddingBottom: spacing(paddingBottom),
      paddingTop: spacing(paddingTop),
      margin: spacing(margin),
      marginLeft: spacing(marginLeft),
      marginRight: spacing(marginRight),
      marginBottom: spacing(marginBottom),
      marginTop: spacing(marginTop),
      backgroundColor: backgroundColor
    }, extend) + (className ? ' ' + className : '')
  }), space ? _react.Children.toArray(children).map(function (child, index, arr) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
      key: index
    }, child, index === arr.length - 1 ? null : /*#__PURE__*/_react.default.createElement(_spacer.Spacer, {
      size: space
    }));
  }) : children);
});
exports.View = View;
View.displayName = 'View';
View.defaultProps = {
  direction: 'column',
  as: 'div',
  grow: 0,
  shrink: 0,
  basis: 'auto',
  display: 'flex',
  alignItems: 'stretch',
  wrap: 'nowrap'
};

var directionProp = _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOf(['row', 'column', 'row-reverse', 'column-reverse'])), _propTypes.default.oneOf(['row', 'column', 'row-reverse', 'column-reverse'])]);

View.propTypes = {
  /** A JSX node */
  children: _propTypes.default.node,

  /** The HTML node that is rendered. */
  as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element, _propTypes.default.elementType, _propTypes.default.func]),

  /** Adds a custom CSS class. */
  className: _propTypes.default.string,

  /** Extends the Fela style object. */
  extend: _propTypes.default.oneOfType([_propTypes2.ruleType, _propTypes.default.arrayOf(_propTypes2.ruleType)]),

  /** Adds inline styles. */
  style: _propTypes.default.object,

  /** A custom background color */
  bg: _propTypes2.responsiveStringProp,

  /** A custom background color */
  backgroundColor: _propTypes2.responsiveStringProp,

  /** Adds spacing between children based on the baselineGrid. */
  spacing: _propTypes.default.oneOfType([_propTypes2.responsiveNumberProp, _propTypes2.responsiveStringProp]),

  /** Adds left padding based on the baselineGrid. */
  paddingLeft: _propTypes2.responsiveNumberProp,

  /** Adds right padding based on the baselineGrid. */
  paddingRight: _propTypes2.responsiveProp,

  /** Adds bottom padding based on the baselineGrid. */
  paddingBottom: _propTypes2.responsiveNumberProp,

  /** Adds top padding based on the baselineGrid. */
  paddingTop: _propTypes2.responsiveNumberProp,

  /** Adds padding based on the baselineGrid. Overwritten by specific directional paddings. */
  padding: _propTypes2.responsiveNumberProp,

  /** Adds left margin based on the baselineGrid. */
  marginLeft: _propTypes2.responsiveNumberProp,

  /** Adds right margin based on the baselineGrid. */
  marginRight: _propTypes2.responsiveNumberProp,

  /** Adds bottom margin based on the baselineGrid. */
  marginBottom: _propTypes2.responsiveNumberProp,

  /** Adds top margin based on the baselineGrid. */
  marginTop: _propTypes2.responsiveNumberProp,

  /** Adds margin based on the baselineGrid. Overwritten by specific directional margins. */
  margin: _propTypes2.responsiveNumberProp,

  /** Sets display. */
  display: _propTypes2.responsiveStringProp,

  /** Sets flex-wrap. */
  wrap: _propTypes2.responsiveStringProp,

  /** Sets the flex-direction. */
  direction: directionProp,

  /** Sets flex-grow. */
  grow: _propTypes2.responsiveNumberProp,

  /** Sets flex-shrink. */
  shrink: _propTypes2.responsiveNumberProp,

  /** Sets flex-basis. */
  basis: _propTypes2.responsiveProp,

  /** Sets order. */
  order: _propTypes2.responsiveNumberProp,

  /** Sets flex. */
  flex: _propTypes2.responsiveProp,

  /** Sets justify-content. */
  justifyContent: _propTypes2.responsiveStringProp,

  /** Sets align-content. */
  alignContent: _propTypes2.responsiveStringProp,

  /** Sets align-items. */
  alignItems: _propTypes2.responsiveStringProp,

  /** Sets align-self. */
  alignSelf: _propTypes2.responsiveStringProp,

  /** Sets max-width. */
  maxWidth: _propTypes2.responsiveProp,

  /** Sets min-width. */
  minWidth: _propTypes2.responsiveProp,

  /** Sets width. */
  width: _propTypes2.responsiveProp,

  /** Sets max-height. */
  maxHeight: _propTypes2.responsiveProp,

  /** Sets min-height. */
  minHeight: _propTypes2.responsiveProp,

  /** Sets height. */
  height: _propTypes2.responsiveProp
};
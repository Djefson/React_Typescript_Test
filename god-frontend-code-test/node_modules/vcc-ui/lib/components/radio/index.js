"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Radio = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _propTypes = require("prop-types");

var _view = require("../view");

var _block = require("../block");

var _radioGroup = require("../radioGroup");

var _getThemeStyle = require("../../get-theme-style");

var _deprecate = require("../../deprecate");

var _autoId = require("../../auto-id");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var radioStyle = function radioStyle(_ref) {
  var theme = _ref.theme,
      isValid = _ref.isValid;
  return {
    boxSizing: 'border-box',
    borderWidth: 1,
    borderStyle: 'solid',
    appearance: 'none',
    borderRadius: '50%',
    flexShrink: 0,
    width: 20,
    height: 20,
    margin: 0,
    padding: 0,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
    cursor: 'pointer',
    borderColor: theme.tokens.inputControlBorder,
    backgroundColor: theme.tokens.inputBackground,
    outline: 0,
    extend: [{
      condition: !isValid,
      style: {
        borderColor: theme.color.foreground.alert,
        borderWidth: 2
      }
    }, {
      condition: isValid,
      style: {
        ':focus': {
          borderColor: theme.tokens.inputBorderFocus
        }
      }
    }],
    ':checked': {
      backgroundColor: theme.tokens.inputControlBackground,
      borderColor: theme.tokens.inputControlBackground,
      ':before': {
        borderRadius: '50%',
        display: 'block',
        content: "''",
        width: 8,
        height: 8,
        position: 'absolute',
        backgroundColor: theme.tokens.inputControlForeground
      }
    },
    ':disabled': {
      cursor: 'not-allowed',
      borderColor: theme.tokens.inputDisabledBorder,
      backgroundColor: theme.tokens.inputDisabledBackground,
      ':checked': {
        borderColor: theme.tokens.inputDisabledBorder,
        backgroundColor: theme.tokens.inputDisabledBackground,
        ':before': {
          backgroundColor: theme.tokens.inputDisabledControl
        }
      }
    }
  };
};

var labelStyle = function labelStyle(_ref2) {
  var theme = _ref2.theme,
      isValid = _ref2.isValid;
  return {
    color: isValid ? theme.color.foreground.secondary : theme.color.foreground.alert,
    fontSize: 16,
    letterSpacing: '0.02em',
    marginTop: -1,
    fontFamily: theme.fontTypes.NOVUM,
    fontWeight: 300
  };
};

var Radio = /*#__PURE__*/_react.default.forwardRef(function (_ref3, ref) {
  var userIsValid = _ref3.isValid,
      userValue = _ref3.value,
      userOnChange = _ref3.onChange,
      userChecked = _ref3.checked,
      userName = _ref3.name,
      _ref3$label = _ref3.label,
      label = _ref3$label === void 0 ? '' : _ref3$label,
      props = (0, _objectWithoutProperties2.default)(_ref3, ["isValid", "value", "onChange", "checked", "name", "label"]);

  var _useFela = (0, _reactFela.useFela)(),
      theme = _useFela.theme;

  var _useContext = (0, _react.useContext)(_radioGroup.RadioContext),
      name = _useContext.name,
      value = _useContext.value,
      isValid = _useContext.isValid,
      _onChange = _useContext.onChange;

  var styleProps = {
    isValid: userIsValid !== undefined ? userIsValid : isValid !== undefined ? isValid : true,
    theme: theme
  };
  var id = (0, _autoId.useId)(name ? name + '-' + userValue : userValue, props.id);
  var checked = userChecked || value === userValue; // legacy check

  var hasLabel = label.length > 0;
  (0, _deprecate.deprecate)('Unlabelled radio-input fields are deprecated and will be removed in 3.0.0. Pass a label prop.', !hasLabel);
  var hasValue = value && value.length > 0;
  (0, _deprecate.deprecate)('Radio buttons with no value provided are deprecated and will be removed in 3.0.0. Pass a value prop.', !hasValue);
  return /*#__PURE__*/_react.default.createElement(_view.View, {
    spacing: 1,
    direction: "row",
    alignItems: "center",
    shrink: 1
  }, /*#__PURE__*/_react.default.createElement(_block.Block, (0, _extends2.default)({
    ref: ref,
    onChange: function onChange(event) {
      if (userOnChange) {
        userOnChange(event);
      } else if (_onChange) {
        _onChange(event);
      }
    },
    checked: checked
  }, props, {
    as: "input",
    type: "radio",
    value: userValue,
    name: name || userName,
    id: id,
    extend: [radioStyle(styleProps), (0, _getThemeStyle.getThemeStyle)('radio', theme, styleProps)]
  })), !hasLabel ? null : /*#__PURE__*/_react.default.createElement(_block.Block, {
    as: "label",
    htmlFor: id,
    style: labelStyle(styleProps)
  }, label));
});

exports.Radio = Radio;
Radio.displayName = 'Radio';
Radio.propTypes = {
  onChange: _propTypes.func,
  checked: _propTypes.bool,

  /** Should be the same for all radio buttons belonging to same group. */
  name: _propTypes.string,
  id: _propTypes.string,
  isValid: _propTypes.bool,

  /** Value of the radio button. */
  value: _propTypes.string,

  /** The label text that is associated with the radio button. */
  label: _propTypes.string
};
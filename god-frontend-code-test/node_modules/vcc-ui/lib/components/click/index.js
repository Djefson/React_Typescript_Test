"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Click = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _block = require("../block");

var _helpers = require("../../helpers");

var _useConfig = require("../../config/use-config");

var buttonResetStyle = {
  background: 'none',
  margin: 0,
  padding: 0,
  textAlign: 'left',
  cursor: 'pointer',
  appearance: 'none',
  borderWidth: 0,
  touchAction: 'manipulation',
  '::-moz-focus-inner': {
    borderWidth: 0,
    padding: 0
  }
};
var linkResetStyle = {
  textDecoration: 'none'
};

var Click = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      extend = _ref.extend,
      href = _ref.href,
      disabled = _ref.disabled,
      onClick = _ref.onClick,
      props = (0, _objectWithoutProperties2.default)(_ref, ["children", "extend", "href", "disabled", "onClick"]);
  var config = (0, _useConfig.useConfig)();
  var hasHref = typeof href === 'string';
  var as = hasHref ? config.linkComponent : 'button';
  var rel = (0, _helpers.getLinkRel)(props);
  return /*#__PURE__*/_react.default.createElement(_block.Block, (0, _extends2.default)({}, props, {
    disabled: as === 'button' && disabled,
    href: !disabled && hasHref ? href : undefined,
    onClick: !disabled && onClick ? onClick : undefined,
    ref: ref,
    as: as,
    rel: rel,
    type: as === 'button' ? props.type || 'button' : null,
    extend: [{
      boxSizing: 'border-box'
    }, as === 'button' ? buttonResetStyle : linkResetStyle, extend]
  }), children);
});

exports.Click = Click;
Click.displayName = 'Click';
Click.propTypes = {
  /** An object containing valid CSS style declarations */
  extend: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func, _propTypes.default.array]),

  /** Setting an href attribute will force the component to render with an `<a>` tag */
  href: _propTypes.default.string,

  /** If rendering a button (by not supplying an href), this let's you provide a type attribute for that button */
  type: _propTypes.default.string,

  /** A JSX node */
  children: _propTypes.default.node,

  /** Set the Click to disabled */
  disabled: _propTypes.default.bool,

  /** An action that is fired on click */
  onClick: _propTypes.default.func
};
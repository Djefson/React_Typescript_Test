"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Nav = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactFela = require("react-fela");

var _block = require("../block");

var _getThemeStyle = require("../../get-theme-style");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var hideOnScrollOffsetTop = 80;

var navStyle = function navStyle(_ref) {
  var theme = _ref.theme,
      sticky = _ref.sticky,
      hideOnScroll = _ref.hideOnScroll,
      isVisible = _ref.isVisible;
  return {
    position: 'relative',
    zIndex: 10,
    width: '100%',
    background: theme.color.background.primary,
    boxSizing: 'border-box',
    ':before': {
      content: "''",
      display: 'block',
      background: theme.color.ornament.divider,
      height: 1,
      outline: 'none',
      position: 'absolute',
      left: 0,
      right: 0,
      zIndex: -1,
      bottom: 0
    },
    extend: [{
      condition: sticky,
      style: {
        position: 'fixed',
        top: 0,
        left: 0
      }
    }, {
      condition: hideOnScroll,
      style: {
        transition: 'transform 200ms ease-out'
      }
    }, {
      condition: !isVisible,
      style: {
        transform: 'translateY(-100%)'
      }
    }]
  };
}; // using an external variable for performance reasons


var previousScrollY = 0;

var Nav = /*#__PURE__*/_react.default.forwardRef(function (_ref2, ref) {
  var hideOnScroll = _ref2.hideOnScroll,
      sticky = _ref2.sticky,
      children = _ref2.children;

  var _useState = (0, _react.useState)(true),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isVisible = _useState2[0],
      setVisible = _useState2[1];

  var _useFela = (0, _reactFela.useFela)(),
      theme = _useFela.theme;

  (0, _react.useEffect)(function () {
    var toggleVisibility = function toggleVisibility() {
      if (window.scrollY > previousScrollY) {
        if (isVisible && window.scrollY > hideOnScrollOffsetTop) {
          setVisible(false);
        }
      } else {
        if (!isVisible) {
          setVisible(true);
        }
      }

      previousScrollY = window.scrollY;
    };

    if (hideOnScroll) {
      window.addEventListener('scroll', toggleVisibility);
    }

    return function () {
      window.removeEventListener('scroll', toggleVisibility);
    };
  }, [hideOnScroll, isVisible]);
  var styleProps = {
    sticky: sticky,
    hideOnScroll: hideOnScroll,
    isVisible: isVisible,
    theme: theme
  };
  return /*#__PURE__*/_react.default.createElement(_block.Block, {
    as: "nav",
    ref: ref,
    extend: [navStyle(styleProps), (0, _getThemeStyle.getThemeStyle)('nav', theme, styleProps)]
  }, children);
});

exports.Nav = Nav;
Nav.displayName = 'Nav';
Nav.propTypes = {
  /** Automatically hide the sticky navigation if the user starts scrolling */
  hideOnScroll: _propTypes.default.bool,

  /** Make the navigation stick to the top of the viewport */
  sticky: _propTypes.default.bool,

  /** A JSX node */
  children: _propTypes.default.node
};
Nav.defaultProps = {
  hideOnScroll: false,
  sticky: false
};
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabNavItem = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _click = require("../click");

var _tabNav = require("../tab-nav");

var _getThemeStyle = require("../../get-theme-style");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var style = function style(_ref) {
  var reverseOut = _ref.reverseOut,
      isActiveTab = _ref.isActiveTab,
      duration = _ref.duration,
      theme = _ref.theme;
  return {
    minWidth: 50,
    alignSelf: 'initial',
    justifyContent: 'center',
    flexGrow: 0,
    flexShrink: 0,
    flexBasis: 'auto',
    whiteSpace: 'nowrap',
    paddingTop: theme.baselineGrid * 2,
    paddingBottom: theme.baselineGrid * 2,
    display: 'flex',
    marginRight: theme.baselineGrid * 2.5,
    transitionProperty: 'color',
    transitionTimingFunction: 'ease-out',
    transitionDuration: duration + 'ms',
    color: reverseOut ? theme.color.primitive.white : theme.color.foreground.primary,
    textAlign: 'left',
    letterSpacing: 0.3,
    fontWeight: 300,
    fontSize: 16,
    fontFamily: theme.fontTypes.NOVUM,
    boxSizing: 'border-box',
    borderBottomWidth: duration === 0 ? 3 : 0,
    borderBottomStyle: 'solid',
    borderBottomColor: 'transparent',
    ':focus': {
      outline: 0,
      color: reverseOut ? theme.color.primitive.white : theme.color.ornament.highlight
    },
    ':focus:not(:focus-visible)': {
      color: reverseOut ? theme.color.primitive.white : theme.color.foreground.primary
    },
    ':hover': {
      color: reverseOut ? theme.color.primitive.white : theme.color.ornament.highlight
    },
    extend: [{
      condition: isActiveTab,
      style: {
        borderBottomColor: reverseOut ? theme.color.primitive.white : theme.color.ornament.highlight,
        color: reverseOut ? theme.color.primitive.white : theme.color.ornament.highlight
      }
    }, {
      condition: duration === 0,
      style: {
        ':hover': {
          borderBottomColor: reverseOut ? theme.color.primitive.white : theme.color.ornament.highlight
        }
      }
    }]
  };
};

function calculatePosition(currentItem, newItem, scrollItem, isRTL) {
  var currentOffset = currentItem ? currentItem.offsetLeft : 0;
  var currentWidth = currentItem ? currentItem.offsetWidth : 0;
  var newWidth = newItem.offsetWidth;
  var newOffset = newItem.offsetLeft;
  var currentDifference = !isRTL ? currentOffset - scrollItem.offsetLeft : scrollItem.offsetWidth - (currentOffset - scrollItem.offsetLeft) - newWidth;
  var newDifference = !isRTL ? newOffset - scrollItem.offsetLeft : scrollItem.offsetWidth - (newOffset - scrollItem.offsetLeft) - newWidth;
  return {
    currentOffset: currentOffset,
    currentWidth: currentWidth,
    currentDifference: currentDifference,
    newWidth: newWidth,
    newOffset: newOffset,
    newDifference: newDifference
  };
}

function activateTab(setActive, currentItem, newItem, scrollItem, borderItem, duration, scrollTolerance, isRTL) {
  var _calculatePosition = calculatePosition(currentItem, newItem, scrollItem, isRTL),
      currentOffset = _calculatePosition.currentOffset,
      currentWidth = _calculatePosition.currentWidth,
      currentDifference = _calculatePosition.currentDifference,
      newOffset = _calculatePosition.newOffset,
      newWidth = _calculatePosition.newWidth,
      newDifference = _calculatePosition.newDifference;

  var property = isRTL ? 'marginRight' : 'marginLeft';
  var toLeft = currentOffset > newOffset; // just a small helper to conditionally apply styles to the border element

  function setStyle(style, value) {
    var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    if (condition) {
      borderItem.style[style] = value + 'px';
    }
  } // scroll into view if scrollItem is actually collapsed


  if (scrollItem.offsetWidth < scrollItem.scrollWidth && scrollItem.offsetWidth > newWidth) {
    var newScrollLeft = newItem.offsetLeft - scrollItem.offsetLeft - scrollItem.scrollLeft;
    var spaceRight = scrollItem.offsetWidth - newWidth - newScrollLeft;

    if (spaceRight - scrollTolerance < 0 || scrollItem.offsetWidth - (spaceRight + scrollTolerance) < newWidth) {
      scrollItem.scrollLeft = newScrollLeft;
    }
  } // set the new active item first to make sure calculation is always correct


  setActive(newItem); // initial load

  if (!currentItem) {
    setStyle('width', newWidth);
    setStyle(property, newDifference);
    return;
  }
  /**
   * Depending on the direction, it transforms the width and the x-offset
   * It uses a helper div (borderRef, see tab-nav/TabNavItemBorder) that is usually hidden
   * It removes the current TabNavItem border and adds it back once the animation is done
   */


  if (toLeft) {
    setStyle('width', currentOffset - newOffset + currentWidth);
    setStyle(property, newDifference, !isRTL);
    setTimeout(function () {
      setStyle(property, newDifference, isRTL);
      setStyle('width', newWidth);
    }, duration * 3 / 2);
  } else {
    setStyle(property, newDifference, isRTL);
    setStyle('width', newWidth + currentDifference - newDifference, isRTL);
    setStyle('width', newWidth + newDifference - currentDifference, !isRTL);
    setTimeout(function () {
      setStyle('width', newWidth);
      setStyle(property, newDifference, !isRTL);
    }, duration * 3 / 2);
  }
}

var TabNavItem = /*#__PURE__*/_react.default.forwardRef(function (_ref2, _ref3) {
  var children = _ref2.children,
      isActive = _ref2.isActive,
      onClick = _ref2.onClick,
      props = (0, _objectWithoutProperties2.default)(_ref2, ["children", "isActive", "onClick"]);

  var _useContext = (0, _react.useContext)(_tabNav.TabNavContext),
      active = _useContext.active,
      setActive = _useContext.setActive,
      scrollRef = _useContext.scrollRef,
      borderRef = _useContext.borderRef,
      reverseOut = _useContext.reverseOut,
      _useContext$duration = _useContext.duration,
      duration = _useContext$duration === void 0 ? 0 : _useContext$duration;

  var _useFela = (0, _reactFela.useFela)(),
      theme = _useFela.theme;

  var itemRef = (0, _react.useRef)();
  var isRTL = theme.direction !== 'ltr';

  var activate = function activate() {
    return activateTab(setActive, active, itemRef.current, scrollRef.current, borderRef.current, duration, theme.baselineGrid * 2.5, isRTL);
  };

  (0, _react.useEffect)(function () {
    if (isActive && setActive) {
      activate();
    }
  }, // also update the active state if isActive is manually updated
  [isActive, isRTL]);
  var styleProps = {
    isActiveTab: active ? active === itemRef.current : isActive,
    reverseOut: reverseOut,
    duration: duration,
    theme: theme
  };

  var onClickHandler = function onClickHandler(e) {
    if (setActive) {
      activate();
    }

    if (onClick) {
      onClick(e);
    }
  };

  return /*#__PURE__*/_react.default.createElement(_click.Click, (0, _extends2.default)({}, props, {
    ref: function ref(el) {
      if (itemRef) itemRef.current = el;
      if (_ref3) _ref3.current = el;
    },
    onClick: onClickHandler,
    extend: [style(styleProps), (0, _getThemeStyle.getThemeStyle)('tabNavItem', theme, styleProps)]
  }), children);
});

exports.TabNavItem = TabNavItem;
TabNavItem.displayName = 'TabNavItem';
TabNavItem.propTypes = {
  children: _propTypes.default.node,

  /** Indicate if the TabNavItem will open a dropdown menu */
  isDropdown: _propTypes.default.bool,

  /** Indicate if the TabNavItem is in an active state */
  isActive: _propTypes.default.bool,

  /** Onclick function */
  onClick: _propTypes.default.func
};
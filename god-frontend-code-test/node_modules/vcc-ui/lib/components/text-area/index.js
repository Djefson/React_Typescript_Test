"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextArea = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _reactFela = require("react-fela");

var _flex = require("../flex");

var _block = require("../block");

var _spacer = require("../spacer");

var _spinner = require("../spinner");

var _message = require("../message");

var _autoId = require("../../auto-id");

var _getThemeStyle = require("../../get-theme-style");

var _deprecate = require("../../deprecate");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var LEGACY_PADDING = 16;

var defaultStyles = function defaultStyles(_ref) {
  var theme = _ref.theme,
      disabled = _ref.disabled,
      loading = _ref.loading,
      isValid = _ref.isValid,
      hasLabel = _ref.hasLabel;
  return _objectSpread(_objectSpread({}, theme.typeScale.columbus.standard.styles), {}, {
    appearance: 'none',
    borderWidth: 1,
    borderStyle: 'solid',
    borderRadius: 4,
    boxSizing: 'border-box',
    display: 'block',
    width: '100%',
    margin: 0,
    outline: 0,
    paddingTop: theme.tokens.inputPaddingVertical * 2,
    paddingBottom: theme.tokens.inputPaddingVertical / 2,
    paddingLeft: theme.tokens.inputPaddingHorizontal - 1,
    paddingRight: theme.tokens.inputPaddingHorizontal - 1,
    borderColor: theme.tokens.inputBorder,
    color: theme.tokens.inputForeground,
    background: theme.tokens.inputBackground,
    '::placeholder': {
      color: 'transparent'
    },
    ':focus': {
      borderColor: theme.tokens.inputBorderFocus,
      '::placeholder': {
        color: theme.tokens.inputPlaceholder
      },
      '& + label': {
        transform: 'translateY(8px)',
        fontSize: 12
      }
    },
    extend: [{
      condition: loading,
      style: {
        userSelect: 'none'
      }
    }, {
      condition: disabled,
      style: {
        ':disabled': {
          cursor: 'not-allowed',
          borderColor: theme.tokens.inputDisabledBorder,
          backgroundColor: theme.tokens.inputDisabledBackground,
          color: theme.tokens.inputForeground,
          '& + label': {
            cursor: 'not-allowed'
          }
        }
      }
    }, {
      condition: !isValid,
      style: {
        ':not(:focus)': {
          borderWidth: 2,
          borderColor: theme.color.foreground.alert,
          paddingTop: theme.tokens.inputPaddingVertical * 2 - 1,
          paddingBottom: theme.tokens.inputPaddingVertical / 2 - 1,
          paddingLeft: theme.tokens.inputPaddingHorizontal - 2,
          paddingRight: theme.tokens.inputPaddingHorizontal - 2
        }
      }
    }, {
      condition: !hasLabel,
      style: {
        paddingTop: LEGACY_PADDING - 1,
        paddingBottom: LEGACY_PADDING - 1,
        '::placeholder': {
          color: theme.tokens.inputPlaceholder
        },
        extend: [{
          condition: !isValid,
          style: {
            ':not(:focus)': {
              borderWidth: 2,
              borderColor: theme.color.foreground.alert,
              paddingTop: LEGACY_PADDING - 2,
              paddingBottom: LEGACY_PADDING - 2,
              paddingLeft: theme.tokens.inputPaddingHorizontal - 2,
              paddingRight: theme.tokens.inputPaddingHorizontal - 2
            }
          }
        }]
      }
    }]
  });
};

var labelStyle = function labelStyle(_ref2) {
  var isEmpty = _ref2.isEmpty,
      isValid = _ref2.isValid,
      theme = _ref2.theme;
  return {
    paddingLeft: theme.tokens.inputPaddingHorizontal,
    paddingRight: theme.tokens.inputPaddingHorizontal,
    color: isValid ? theme.color.foreground.secondary : theme.color.foreground.alert,
    transitionProperty: 'font-size, transform',
    transitionDuration: '60ms',
    transitionTimingFunction: 'ease-out',
    transform: 'translateY(' + (isEmpty ? 17 : 8) + 'px)',
    fontSize: isEmpty ? 16 : 12,
    letterSpacing: '0.02em',
    fontFamily: theme.fontTypes.NOVUM,
    fontWeight: 300,
    position: 'absolute',
    pointerEvents: 'none'
  };
};

var TextArea = /*#__PURE__*/_react.default.forwardRef(function (_ref3, ref) {
  var _ref3$value = _ref3.value,
      value = _ref3$value === void 0 ? '' : _ref3$value,
      onChange = _ref3.onChange,
      _ref3$isValid = _ref3.isValid,
      isValid = _ref3$isValid === void 0 ? true : _ref3$isValid,
      _ref3$label = _ref3.label,
      label = _ref3$label === void 0 ? '' : _ref3$label,
      _ref3$description = _ref3.description,
      description = _ref3$description === void 0 ? '' : _ref3$description,
      _ref3$errorMessage = _ref3.errorMessage,
      errorMessage = _ref3$errorMessage === void 0 ? '' : _ref3$errorMessage,
      _ref3$loading = _ref3.loading,
      loading = _ref3$loading === void 0 ? false : _ref3$loading,
      _ref3$disabled = _ref3.disabled,
      disabled = _ref3$disabled === void 0 ? false : _ref3$disabled,
      props = (0, _objectWithoutProperties2.default)(_ref3, ["value", "onChange", "isValid", "label", "description", "errorMessage", "loading", "disabled"]);

  var _useFela = (0, _reactFela.useFela)(),
      theme = _useFela.theme; // legacy check


  var hasLabel = label.length > 0;
  (0, _deprecate.deprecate)('Unlabelled text-area fields are deprecated and will be removed in 3.0.0. Pass a label prop.', !hasLabel);
  var isEmpty = value.length === 0;
  var styleProps = {
    isEmpty: isEmpty,
    hasLabel: hasLabel,
    isValid: isValid,
    disabled: disabled,
    loading: loading,
    theme: theme
  };
  var id = (0, _autoId.useId)('vcc-ui-text-area', props.id);
  var errorMessageId = (0, _autoId.makeId)(id, 'error');
  var descriptionId = (0, _autoId.makeId)(id, 'description');
  var describedBy = (0, _autoId.makeIdList)([errorMessage && errorMessageId, description && descriptionId]);

  var messages = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, errorMessage || description ? /*#__PURE__*/_react.default.createElement(_spacer.Spacer, {
    size: 0.5
  }) : null, errorMessage ? /*#__PURE__*/_react.default.createElement(_message.Message, {
    type: "error",
    id: errorMessageId
  }, errorMessage) : null, description ? /*#__PURE__*/_react.default.createElement(_message.Message, {
    id: descriptionId
  }, description) : null);

  return /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    extend: {
      flexDirection: 'column',
      width: '100%'
    }
  }, /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    extend: {
      position: 'relative'
    }
  }, loading && /*#__PURE__*/_react.default.createElement(_flex.Flex, {
    extend: {
      position: 'absolute',
      width: '100%',
      height: '100%',
      alignItems: 'center',
      justifyContent: 'center'
    }
  }, /*#__PURE__*/_react.default.createElement(_spinner.Spinner, {
    color: theme.tokens.inputForeground,
    size: 24
  })), /*#__PURE__*/_react.default.createElement(_block.Block, (0, _extends2.default)({}, props, {
    ref: ref,
    as: "textarea",
    value: loading ? '' : value,
    disabled: disabled || loading,
    id: id,
    onChange: onChange,
    extend: [defaultStyles(styleProps), (0, _getThemeStyle.getThemeStyle)('textArea', theme, styleProps)]
  }, describedBy && {
    'aria-describedby': describedBy
  })), !loading && hasLabel ? /*#__PURE__*/_react.default.createElement(_block.Block, {
    as: "label",
    htmlFor: id,
    extend: labelStyle(styleProps)
  }, label) : null), messages);
});

exports.TextArea = TextArea;
TextArea.displayName = 'TextArea';
TextArea.propTypes = {
  id: _propTypes.string,
  name: _propTypes.string,

  /** Renders a label inside the input.  */
  label: _propTypes.string,

  /** Renders a neutral helper message underneath the input.  */
  description: _propTypes.string,

  /** Renders a red error message for validation underneath the input.  */
  errorMessage: _propTypes.string,
  onChange: _propTypes.func.isRequired,

  /** Value of the input. This should be stored in the
   * state of the parent component  */
  value: _propTypes.string.isRequired,

  /** Renders the input as valid or invalid */
  isValid: _propTypes.bool,
  loading: _propTypes.bool,
  disabled: _propTypes.bool
};
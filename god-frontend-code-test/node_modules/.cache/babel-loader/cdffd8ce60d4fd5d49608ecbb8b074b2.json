{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\n\nfunction applyFactor(factor) {\n  return function (value) {\n    if (value === undefined || value === null) {\n      return undefined;\n    } // this allows stringy numbers e.g. <View paddingLeft=\"4\" /> to be parsed and multiplied as well\n\n\n    if (typeof value === 'string') {\n      var parsedValue = parseInt(value, 10);\n      return value == parsedValue ? parsedValue * factor : value;\n    }\n\n    if (typeof value !== 'number') {\n      return value;\n    }\n\n    return value * factor;\n  };\n}\n\nexport function applySpaceMultiplier() {\n  var factor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var applyFactorToValue = applyFactor(factor);\n  return function (value) {\n    if (Array.isArray(value)) {\n      return value.map(applyFactorToValue);\n    } else if (_typeof(value) === 'object') {\n      return Object.keys(value).reduce(function (out, key) {\n        out[key] = applyFactorToValue(value[key]);\n        return out;\n      }, {});\n    }\n\n    return applyFactorToValue(value);\n  };\n}","map":{"version":3,"sources":["C:/Users/jophy/Documents/volvo-cars/node_modules/vcc-ui/es/apply-space-multiplier.js"],"names":["_typeof","applyFactor","factor","value","undefined","parsedValue","parseInt","applySpaceMultiplier","arguments","length","applyFactorToValue","Array","isArray","map","Object","keys","reduce","out","key"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,+BAApB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAO,UAAUC,KAAV,EAAiB;AACtB,QAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAArC,EAA2C;AACzC,aAAOC,SAAP;AACD,KAHqB,CAGpB;;;AAGF,QAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAIE,WAAW,GAAGC,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAA1B;AACA,aAAOA,KAAK,IAAIE,WAAT,GAAuBA,WAAW,GAAGH,MAArC,GAA8CC,KAArD;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOA,KAAP;AACD;;AAED,WAAOA,KAAK,GAAGD,MAAf;AACD,GAhBD;AAiBD;;AAED,OAAO,SAASK,oBAAT,GAAgC;AACrC,MAAIL,MAAM,GAAGM,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBJ,SAAzC,GAAqDI,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAjF;AACA,MAAIE,kBAAkB,GAAGT,WAAW,CAACC,MAAD,CAApC;AACA,SAAO,UAAUC,KAAV,EAAiB;AACtB,QAAIQ,KAAK,CAACC,OAAN,CAAcT,KAAd,CAAJ,EAA0B;AACxB,aAAOA,KAAK,CAACU,GAAN,CAAUH,kBAAV,CAAP;AACD,KAFD,MAEO,IAAIV,OAAO,CAACG,KAAD,CAAP,KAAmB,QAAvB,EAAiC;AACtC,aAAOW,MAAM,CAACC,IAAP,CAAYZ,KAAZ,EAAmBa,MAAnB,CAA0B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACnDD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWR,kBAAkB,CAACP,KAAK,CAACe,GAAD,CAAN,CAA7B;AACA,eAAOD,GAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID;;AAED,WAAOP,kBAAkB,CAACP,KAAD,CAAzB;AACD,GAXD;AAYD","sourcesContent":["import _typeof from \"@babel/runtime/helpers/typeof\";\n\nfunction applyFactor(factor) {\n  return function (value) {\n    if (value === undefined || value === null) {\n      return undefined;\n    } // this allows stringy numbers e.g. <View paddingLeft=\"4\" /> to be parsed and multiplied as well\n\n\n    if (typeof value === 'string') {\n      var parsedValue = parseInt(value, 10);\n      return value == parsedValue ? parsedValue * factor : value;\n    }\n\n    if (typeof value !== 'number') {\n      return value;\n    }\n\n    return value * factor;\n  };\n}\n\nexport function applySpaceMultiplier() {\n  var factor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var applyFactorToValue = applyFactor(factor);\n  return function (value) {\n    if (Array.isArray(value)) {\n      return value.map(applyFactorToValue);\n    } else if (_typeof(value) === 'object') {\n      return Object.keys(value).reduce(function (out, key) {\n        out[key] = applyFactorToValue(value[key]);\n        return out;\n      }, {});\n    }\n\n    return applyFactorToValue(value);\n  };\n}"]},"metadata":{},"sourceType":"module"}
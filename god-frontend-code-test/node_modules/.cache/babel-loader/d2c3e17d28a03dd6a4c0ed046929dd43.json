{"ast":null,"code":"'use strict';\n/**\n * The custom `sort` method for\n * for the [`css-mqpacker`](https://www.npmjs.com/package/css-mqpacker) or\n * [`pleeease`](https://www.npmjs.com/package/pleeease) which using `css-mqpacker`\n * or, perhaps, something else ))\n *\n * @module sort-css-media-queries\n * @author Oleg Dutchenko <dutchenko.o.wezom@gmail.com>\n * @version 1.5.0\n */\n// ----------------------------------------\n// Private\n// ----------------------------------------\n\nconst minMaxWidth = /(!?\\(\\s*min(-device-)?-width)(.|\\n)+\\(\\s*max(-device)?-width/i;\nconst minWidth = /\\(\\s*min(-device)?-width/i;\nconst maxMinWidth = /(!?\\(\\s*max(-device)?-width)(.|\\n)+\\(\\s*min(-device)?-width/i;\nconst maxWidth = /\\(\\s*max(-device)?-width/i;\n\nconst isMinWidth = _testQuery(minMaxWidth, maxMinWidth, minWidth);\n\nconst isMaxWidth = _testQuery(maxMinWidth, minMaxWidth, maxWidth);\n\nconst minMaxHeight = /(!?\\(\\s*min(-device)?-height)(.|\\n)+\\(\\s*max(-device)?-height/i;\nconst minHeight = /\\(\\s*min(-device)?-height/i;\nconst maxMinHeight = /(!?\\(\\s*max(-device)?-height)(.|\\n)+\\(\\s*min(-device)?-height/i;\nconst maxHeight = /\\(\\s*max(-device)?-height/i;\n\nconst isMinHeight = _testQuery(minMaxHeight, maxMinHeight, minHeight);\n\nconst isMaxHeight = _testQuery(maxMinHeight, minMaxHeight, maxHeight);\n\nconst isPrint = /print/i;\nconst isPrintOnly = /^print$/i;\nconst maxValue = Number.MAX_VALUE;\n/**\n * Obtain the length of the media request in pixels.\n * Copy from original source `function inspectLength (length)`\n * {@link https://github.com/hail2u/node-css-mqpacker/blob/master/index.js#L58}\n * @private\n * @param {string} length\n * @return {number}\n */\n\nfunction _getQueryLength(length) {\n  length = /(-?\\d*\\.?\\d+)(ch|em|ex|px|rem)/.exec(length);\n\n  if (length === null) {\n    return maxValue;\n  }\n\n  let number = length[1];\n  const unit = length[2];\n\n  switch (unit) {\n    case 'ch':\n      number = parseFloat(number) * 8.8984375;\n      break;\n\n    case 'em':\n    case 'rem':\n      number = parseFloat(number) * 16;\n      break;\n\n    case 'ex':\n      number = parseFloat(number) * 8.296875;\n      break;\n\n    case 'px':\n      number = parseFloat(number);\n      break;\n  }\n\n  return +number;\n}\n/**\n * Wrapper for creating test functions\n * @private\n * @param {RegExp} doubleTestTrue\n * @param {RegExp} doubleTestFalse\n * @param {RegExp} singleTest\n * @return {Function}\n */\n\n\nfunction _testQuery(doubleTestTrue, doubleTestFalse, singleTest) {\n  /**\n   * @param {string} query\n   * @return {boolean}\n   */\n  return function (query) {\n    if (doubleTestTrue.test(query)) {\n      return true;\n    } else if (doubleTestFalse.test(query)) {\n      return false;\n    }\n\n    return singleTest.test(query);\n  };\n}\n/**\n * @private\n * @param {string} a\n * @param {string} b\n * @return {number|null}\n */\n\n\nfunction _testIsPrint(a, b) {\n  const isPrintA = isPrint.test(a);\n  const isPrintOnlyA = isPrintOnly.test(a);\n  const isPrintB = isPrint.test(b);\n  const isPrintOnlyB = isPrintOnly.test(b);\n\n  if (isPrintA && isPrintB) {\n    if (!isPrintOnlyA && isPrintOnlyB) {\n      return 1;\n    }\n\n    if (isPrintOnlyA && !isPrintOnlyB) {\n      return -1;\n    }\n\n    return a.localeCompare(b);\n  }\n\n  if (isPrintA) {\n    return 1;\n  }\n\n  if (isPrintB) {\n    return -1;\n  }\n\n  return null;\n} // ----------------------------------------\n// Public\n// ----------------------------------------\n\n/**\n * Sorting an array with media queries\n * according to the mobile-first methodology.\n * @param {string} a\n * @param {string} b\n * @return {number} 1 / 0 / -1\n */\n\n\nfunction sortCSSmq(a, b) {\n  const testIsPrint = _testIsPrint(a, b);\n\n  if (testIsPrint !== null) {\n    return testIsPrint;\n  }\n\n  const minA = isMinWidth(a) || isMinHeight(a);\n  const maxA = isMaxWidth(a) || isMaxHeight(a);\n  const minB = isMinWidth(b) || isMinHeight(b);\n  const maxB = isMaxWidth(b) || isMaxHeight(b);\n\n  if (minA && maxB) {\n    return -1;\n  }\n\n  if (maxA && minB) {\n    return 1;\n  }\n\n  let lengthA = _getQueryLength(a);\n\n  let lengthB = _getQueryLength(b);\n\n  if (lengthA === maxValue && lengthB === maxValue) {\n    return a.localeCompare(b);\n  } else if (lengthA === maxValue) {\n    return 1;\n  } else if (lengthB === maxValue) {\n    return -1;\n  }\n\n  if (lengthA > lengthB) {\n    if (maxA) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  if (lengthA < lengthB) {\n    if (maxA) {\n      return 1;\n    }\n\n    return -1;\n  }\n\n  return a.localeCompare(b);\n}\n/**\n * Sorting an array with media queries\n * according to the desktop-first methodology.\n * @param {string} a\n * @param {string} b\n * @return {number} 1 / 0 / -1\n */\n\n\nsortCSSmq.desktopFirst = function (a, b) {\n  const testIsPrint = _testIsPrint(a, b);\n\n  if (testIsPrint !== null) {\n    return testIsPrint;\n  }\n\n  const minA = isMinWidth(a) || isMinHeight(a);\n  const maxA = isMaxWidth(a) || isMaxHeight(a);\n  const minB = isMinWidth(b) || isMinHeight(b);\n  const maxB = isMaxWidth(b) || isMaxHeight(b);\n\n  if (minA && maxB) {\n    return 1;\n  }\n\n  if (maxA && minB) {\n    return -1;\n  }\n\n  const lengthA = _getQueryLength(a);\n\n  const lengthB = _getQueryLength(b);\n\n  if (lengthA === maxValue && lengthB === maxValue) {\n    return a.localeCompare(b);\n  } else if (lengthA === maxValue) {\n    return 1;\n  } else if (lengthB === maxValue) {\n    return -1;\n  }\n\n  if (lengthA > lengthB) {\n    if (maxA) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  if (lengthA < lengthB) {\n    if (maxA) {\n      return 1;\n    }\n\n    return -1;\n  }\n\n  return -a.localeCompare(b);\n}; // ----------------------------------------\n// Exports\n// ----------------------------------------\n\n\nmodule.exports = sortCSSmq;","map":{"version":3,"sources":["C:/Users/jophy/Documents/god-frontend-code-test/node_modules/sort-css-media-queries/index.js"],"names":["minMaxWidth","minWidth","maxMinWidth","maxWidth","isMinWidth","_testQuery","isMaxWidth","minMaxHeight","minHeight","maxMinHeight","maxHeight","isMinHeight","isMaxHeight","isPrint","isPrintOnly","maxValue","Number","MAX_VALUE","_getQueryLength","length","exec","number","unit","parseFloat","doubleTestTrue","doubleTestFalse","singleTest","query","test","_testIsPrint","a","b","isPrintA","isPrintOnlyA","isPrintB","isPrintOnlyB","localeCompare","sortCSSmq","testIsPrint","minA","maxA","minB","maxB","lengthA","lengthB","desktopFirst","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * The custom `sort` method for\n * for the [`css-mqpacker`](https://www.npmjs.com/package/css-mqpacker) or\n * [`pleeease`](https://www.npmjs.com/package/pleeease) which using `css-mqpacker`\n * or, perhaps, something else ))\n *\n * @module sort-css-media-queries\n * @author Oleg Dutchenko <dutchenko.o.wezom@gmail.com>\n * @version 1.5.0\n */\n\n// ----------------------------------------\n// Private\n// ----------------------------------------\n\nconst minMaxWidth = /(!?\\(\\s*min(-device-)?-width)(.|\\n)+\\(\\s*max(-device)?-width/i\nconst minWidth = /\\(\\s*min(-device)?-width/i\nconst maxMinWidth = /(!?\\(\\s*max(-device)?-width)(.|\\n)+\\(\\s*min(-device)?-width/i\nconst maxWidth = /\\(\\s*max(-device)?-width/i\n\nconst isMinWidth = _testQuery(minMaxWidth, maxMinWidth, minWidth)\nconst isMaxWidth = _testQuery(maxMinWidth, minMaxWidth, maxWidth)\n\nconst minMaxHeight = /(!?\\(\\s*min(-device)?-height)(.|\\n)+\\(\\s*max(-device)?-height/i\nconst minHeight = /\\(\\s*min(-device)?-height/i\nconst maxMinHeight = /(!?\\(\\s*max(-device)?-height)(.|\\n)+\\(\\s*min(-device)?-height/i\nconst maxHeight = /\\(\\s*max(-device)?-height/i\n\nconst isMinHeight = _testQuery(minMaxHeight, maxMinHeight, minHeight)\nconst isMaxHeight = _testQuery(maxMinHeight, minMaxHeight, maxHeight)\n\nconst isPrint = /print/i\nconst isPrintOnly = /^print$/i\n\nconst maxValue = Number.MAX_VALUE\n\n/**\n * Obtain the length of the media request in pixels.\n * Copy from original source `function inspectLength (length)`\n * {@link https://github.com/hail2u/node-css-mqpacker/blob/master/index.js#L58}\n * @private\n * @param {string} length\n * @return {number}\n */\nfunction _getQueryLength (length) {\n  length = /(-?\\d*\\.?\\d+)(ch|em|ex|px|rem)/.exec(length)\n\n  if (length === null) {\n    return maxValue\n  }\n\n  let number = length[1]\n  const unit = length[2]\n\n  switch (unit) {\n    case 'ch':\n      number = parseFloat(number) * 8.8984375\n      break\n\n    case 'em':\n    case 'rem':\n      number = parseFloat(number) * 16\n      break\n\n    case 'ex':\n      number = parseFloat(number) * 8.296875\n      break\n\n    case 'px':\n      number = parseFloat(number)\n      break\n  }\n\n  return +number\n}\n\n/**\n * Wrapper for creating test functions\n * @private\n * @param {RegExp} doubleTestTrue\n * @param {RegExp} doubleTestFalse\n * @param {RegExp} singleTest\n * @return {Function}\n */\nfunction _testQuery (doubleTestTrue, doubleTestFalse, singleTest) {\n  /**\n   * @param {string} query\n   * @return {boolean}\n   */\n  return function (query) {\n    if (doubleTestTrue.test(query)) {\n      return true\n    } else if (doubleTestFalse.test(query)) {\n      return false\n    }\n    return singleTest.test(query)\n  }\n}\n\n/**\n * @private\n * @param {string} a\n * @param {string} b\n * @return {number|null}\n */\nfunction _testIsPrint (a, b) {\n  const isPrintA = isPrint.test(a)\n  const isPrintOnlyA = isPrintOnly.test(a)\n\n  const isPrintB = isPrint.test(b)\n  const isPrintOnlyB = isPrintOnly.test(b)\n\n  if (isPrintA && isPrintB) {\n    if (!isPrintOnlyA && isPrintOnlyB) {\n      return 1\n    }\n    if (isPrintOnlyA && !isPrintOnlyB) {\n      return -1\n    }\n    return a.localeCompare(b)\n  }\n  if (isPrintA) {\n    return 1\n  }\n  if (isPrintB) {\n    return -1\n  }\n\n  return null\n}\n\n// ----------------------------------------\n// Public\n// ----------------------------------------\n\n/**\n * Sorting an array with media queries\n * according to the mobile-first methodology.\n * @param {string} a\n * @param {string} b\n * @return {number} 1 / 0 / -1\n */\nfunction sortCSSmq (a, b) {\n  const testIsPrint = _testIsPrint(a, b)\n  if (testIsPrint !== null) {\n    return testIsPrint\n  }\n\n  const minA = isMinWidth(a) || isMinHeight(a)\n  const maxA = isMaxWidth(a) || isMaxHeight(a)\n\n  const minB = isMinWidth(b) || isMinHeight(b)\n  const maxB = isMaxWidth(b) || isMaxHeight(b)\n\n  if (minA && maxB) {\n    return -1\n  }\n  if (maxA && minB) {\n    return 1\n  }\n\n  let lengthA = _getQueryLength(a)\n  let lengthB = _getQueryLength(b)\n\n  if (lengthA === maxValue && lengthB === maxValue) {\n    return a.localeCompare(b)\n  } else if (lengthA === maxValue) {\n    return 1\n  } else if (lengthB === maxValue) {\n    return -1\n  }\n\n  if (lengthA > lengthB) {\n    if (maxA) {\n      return -1\n    }\n    return 1\n  }\n\n  if (lengthA < lengthB) {\n    if (maxA) {\n      return 1\n    }\n    return -1\n  }\n\n  return a.localeCompare(b)\n}\n\n/**\n * Sorting an array with media queries\n * according to the desktop-first methodology.\n * @param {string} a\n * @param {string} b\n * @return {number} 1 / 0 / -1\n */\nsortCSSmq.desktopFirst = function (a, b) {\n  const testIsPrint = _testIsPrint(a, b)\n  if (testIsPrint !== null) {\n    return testIsPrint\n  }\n\n  const minA = isMinWidth(a) || isMinHeight(a)\n  const maxA = isMaxWidth(a) || isMaxHeight(a)\n\n  const minB = isMinWidth(b) || isMinHeight(b)\n  const maxB = isMaxWidth(b) || isMaxHeight(b)\n\n  if (minA && maxB) {\n    return 1\n  }\n  if (maxA && minB) {\n    return -1\n  }\n\n  const lengthA = _getQueryLength(a)\n  const lengthB = _getQueryLength(b)\n\n  if (lengthA === maxValue && lengthB === maxValue) {\n    return a.localeCompare(b)\n  } else if (lengthA === maxValue) {\n    return 1\n  } else if (lengthB === maxValue) {\n    return -1\n  }\n\n  if (lengthA > lengthB) {\n    if (maxA) {\n      return -1\n    }\n    return 1\n  }\n\n  if (lengthA < lengthB) {\n    if (maxA) {\n      return 1\n    }\n    return -1\n  }\n\n  return -(a.localeCompare(b))\n}\n\n// ----------------------------------------\n// Exports\n// ----------------------------------------\n\nmodule.exports = sortCSSmq\n"]},"metadata":{},"sourceType":"script"}